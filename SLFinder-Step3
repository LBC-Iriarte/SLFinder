#!/usr/bin/env bash

##### Default Parameters
OUT_DIR=SL-analysis
GENOME_REF=FALSE
SL_FILE=$OUT_DIR/Results/Hook_variants/Hook_all_variants.fa
GENOME_REGION_RANGE=100
GENOME_MATCH_COVERAGE=90
THREADS=1
ANNOTATION_BLAST_REF=FALSE
ANNOTATION_BLAST_TYPE=prot
BLAST_EVALUE=10

##### Usage
usage()
{
	echo "usage: SL:detector-step-3.sh [OTHER PARAMETERS] [-g Ref GENOME] [-br Ref PROT/cDNA] | [-h]]

This script takes the Hook Variants generated in Step 2 and searches hits for them in a reference genome using BLAST.
They are lated catalogued according to the presence/absence of a potential conor site (GT bases at the 3'prima of the hit) and the presence/abscent of known proteins in their vicinity.

Donor site notation:
- '3prima' or '5prima': depending if the hit is found as sense or anti sense in the Genome reference (as a help for each locus inspection)
- '*': if there is overlap between the Hook Variant and the pSL locus (manual inspection is particulary adviced)
- 'Unclear': If less than 80% of matching Hook Variants are associeated with a Donor Site
- 'Not Found': Self explanatory
- 'Not Analysed': SLFinder din't analysed the locus for some reason (see manual)

Important note:
- During SLFinder develoment Seqkit incorporated an alphabet control when generated the reverse complement of a sequence. If you are using a newer version than v10 you will get a warning saying you should use it, for each single hit in the genome.
	This will e addresed in the next version of SLFinder, literally by just adding '-v' when needed. It shouldn't affect the results.

Packages required to have on the path:
	1) BLAST
	2) Seqkit
	3) MAFFT
	4) CD-HIT

Input options:
	-g, --genomeblast	Reference genome in fasta format (unzipped)
	-s, --pslfile	File name with trimming information needed to retrieve the pSL sequences (Default: Hook_all_variants.fa)
	-br, --blast_ref Reference database in fasta format, to be used to annotate the regions if provided

pSL against Genome BLAST options
	-gc, --gen_cov	Coverage threshold of the pSL matches on the genome (Default: 90)

pSL genomic loci against Annotation ref. options:
	-bt, --blast_ty	Reference database type: nucl or prot (Default: prot)
	-be, --blast_ev	Order of magnitude for the evalue cutoff used in the BLAST annotation, the program reads it as '1e-'[YOUR VALUE] (Default: 10. For a 1e-10 cutoff)
	-gr, --rangeG	Genome region to annotate (Default: 100pb)

Other options:
	-o, --outdir	Directory with SLFinder-Step1 and 2 results  (Default: SL-analysis)
	-t, --threads	Number of processors to use when possible (cd-hit-est, MAFFT) (Default=1)
	-h, --help	This help message.
"
exit
}

##### Reading Parameters
while [ "$1" != "" ]; do
	case $1 in
		-br | --blast_ref )		shift
								ANNOTATION_BLAST_REF=$1
								;;
		-bt | --blast_ty )		shift
								ANNOTATION_BLAST_TYPE=$1
								;;
		-be | --blast_ev )		shift
								BLAST_EVALUE=$1
								;;
		-gc | --gen_cov )		shift
								GENOME_MATCH_COVERAGE=$1
								;;
		-g | --genomeblast )	shift
								GENOME_REF=$1
								;;
		-o | --outdir )			shift
								OUT_DIR=$1
								;;
		-s | --pslfile )		shift
								SL_FILE=$1
								;;
		-gr | --rangeG )		shift
								GENOME_REGION_RANGE=$1
								;;
		-t | --threads )		shift
								THREADS=$1
								;;
		-h | --help )			usage
								exit
								;;
		* )						usage
								exit 1
	esac
	shift
done

##### Checking if all programs are installed
hash blastn 2>/dev/null || { echo >&2 "Blast seems to not been installed or added to the Path. Aborting."; exit 1; }
hash seqkit 2>/dev/null || { echo >&2 "Seqkit seems to not been installed or added to the Path. Aborting."; exit 1; }
hash mafft 2>/dev/null || { echo >&2 "Mafft seems to not been installed or added to the Path. Aborting."; exit 1; }
hash cd-hit-est 2>/dev/null || { echo >&2 "Cd-hit-est seems to not been installed or added to the Path. Aborting."; exit 1; }

##### Validación de parámetros

# OUT_DIR exists and there is no other
if [ -z $OUT_DIR ]
then
	echo "No OUT_DIR detected. Something must be wrong with the given command (eg. whitespaces)"
	exit 1
else
	if [ ! -d $OUT_DIR ]
	then
		echo "There is no directory named: "$OUT_DIR
		exit 1
	fi
fi

# Reference genome fasta file exists, is a fasta and its not ziped
reference_genome=$(seqkit stats $GENOME_REF)
if [ -z "$reference_genome" ]
then
	echo "Invalid reference genome file: "$GENOME_REF
	exit 1
else
	not_zipped=$(ls $GENOME_REF | grep -c ".gz"$) #
	if [ ! $not_zipped -eq 0 ]
	then
		echo "Please unzip "$GENOME_REF
		exit 1
	fi
fi

# SL_FILE exists and is a fasta file
sl_secuences=$(ls $SL_FILE)
if [ -z "$sl_secuences" ]
then
	echo "No SL file detected in: "$SL_FILE
	exit 1
else
	is_fasta=$(seqkit stats $SL_FILE)
	if [ -z "$sl_secuences" ]
	then
		echo $SL_FILE" isn't a fasta file or its damaged"
		exit 1
	fi
fi

# THREADS is a valid number
if [[ ! "$THREADS" =~ ^[0-9]+$ ]]
then
	echo "-t value must be an integir: " $THREADS
	exit 1
else
	if [ $THREADS -eq 0 ]
	then
		echo "Invalid -t value: "$THREADS
		exit 1
	fi
fi

# $GENOME_MATCH_COVERAGE is a valid number
if [[ ! "$GENOME_MATCH_COVERAGE" =~ ^[0-9]+$ ]]
then
	echo "-t value must be an integir: " $GENOME_MATCH_COVERAGE
	exit 1
else
	if [ $GENOME_MATCH_COVERAGE -eq 0 ] || [ $GENOME_MATCH_COVERAGE -gt 100 ]
	then
		echo "Invalid -t value: "$GENOME_MATCH_COVERAGE
		exit 1
	fi
fi

# $ANNOTATION_BLAST_REF exists
if [ "$ANNOTATION_BLAST_REF" == "FALSE" ]
then
	echo "No external reference provided"
	exit 1
else
	blast_reference=$(seqkit stats $ANNOTATION_BLAST_REF)
	if [ -z "$blast_reference" ]
	then
		echo "Invalid blast reference file: "$blast_reference
		exit 1
	else
		not_zipped=$(ls $ANNOTATION_BLAST_REF | grep -c ".gz"$)
		if [ ! $not_zipped -eq 0 ]
		then
			echo "Please unzip "$ANNOTATION_BLAST_REF
			exit 1
		fi
	fi
fi

# $ANNOTATION_BLAST_TYPE is a valid string
if [ ! "$ANNOTATION_BLAST_TYPE" == "prot" ]
then
	if [ ! "$ANNOTATION_BLAST_TYPE" == "nucl" ]
	then
		echo "Invalid -bt: "$ANNOTATION_BLAST_TYPE
		echo "Must be 'nucl' or 'prot'"
		exit 1
	fi
fi

# $BLAST_EVALUE is a valid number
if [[ ! "$BLAST_EVALUE" =~ ^[0-9]+$ ]]
then
	echo "-be value must be an integir: " $BLAST_EVALUE
	exit 1
else
	if [ $BLAST_EVALUE -eq 0 ]
	then
		echo "Invalid -be value: "$BLAST_EVALUE
		exit 1
	fi
fi

# $GENOME_REGION_RANGE is a valid number
if [[ ! "$GENOME_REGION_RANGE" =~ ^[0-9]+$ ]]
then
	echo "-r value must be an integir: " $GENOME_REGION_RANGE
	exit 1
else
	if [ $GENOME_REGION_RANGE -le 0 ]
	then
		echo "Invalid -r value: "$GENOME_REGION_RANGE
		exit 1
	fi
fi

##### Program execution
echo "Removing previous run"
### Removing previous run
rm -r $OUT_DIR/temp_files/Reference
rm -r $OUT_DIR/temp_files/Genome_locis
rm -r $OUT_DIR/temp_files/Spliced_leader_transcripts
rm -r $OUT_DIR/Results/SL_BLAST
rm -r $OUT_DIR/Results/Genome_locis
rm -r $OUT_DIR/Results/Spliced_leader_transcripts
rm $OUT_DIR/Results/Step3_Loci.tab
rm $OUT_DIR/Warnings/Step3_Loci_extension_warnings
rm $OUT_DIR/Warnings/Step3_Donor_site_warnings
rm $OUT_DIR/Warnings/Step3_Sequence-retrieval-warnings
rm $OUT_DIR/Results/SL_Clases-Unclear.fa
rm $OUT_DIR/Results/SL_Clases.fa
rm $OUT_DIR/Results/Step3_Spliced_transcripts
rm $OUT_DIR/Results/Step3_Hook-Stats
rm $OUT_DIR/Results/pSL_Loci_Unclear.fa
rm $OUT_DIR/Results/pSL_Loci.fa

###Creation of necesary directories
echo "Creating new output directories"
# Temporal files
mkdir $OUT_DIR/temp_files/Reference
mkdir $OUT_DIR/temp_files/Genome_locis
mkdir $OUT_DIR/temp_files/Spliced_leader_transcripts

#Results
mkdir $OUT_DIR/Results/SL_BLAST
mkdir $OUT_DIR/Results/Genome_locis
mkdir $OUT_DIR/Results/Spliced_leader_transcripts

### Creating Blast Database
echo "Constructing genome blast reference"
makeblastdb -in $GENOME_REF -dbtype nucl -parse_seqids -input_type fasta -out $OUT_DIR/temp_files/Reference/Reference_genome-ref
seqkit fx2tab -n -l -i $GENOME_REF >> $OUT_DIR/temp_files/Reference/Genome_size

### Blasting pSLs to the Reference Genome (100% de identidad obligatorio)
echo "
Conducting BLAST search"
blastn -task blastn-short -query $SL_FILE -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -outfmt "6 std" -out $OUT_DIR/Results/SL_BLAST/"SL-BLAST" -num_threads $THREADS -perc_identity 100 -ungapped -qcov_hsp_perc $GENOME_MATCH_COVERAGE

### Checking if there are Blast Results
check_blast=$(find $OUT_DIR/Results/SL_BLAST/ -type f -empty | grep "SL-BLAST") # Just to be sure
if [ ! -z "$check_blast" ]
then
	echo "No BLAST results to analyze"
genome_ID=$(echo $GENOME_REF | sed 's/.*\///g')
echo "####################################
#####   Step3 Summary Report   #####
####################################

No matching locus was found for any Hook Variant on the reference genome file: "$genome_ID"
Genome hit coverage: "$GENOME_MATCH_COVERAGE > $OUT_DIR/Step3_Summary
	exit
fi

### Recovering locus coordinates
echo "Procesing BLAST results."
echo -e "Locus\tStar\tEnd\tLocus length\tLongest Hit\tExtension alert\tIdentity Alert" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings

loci_number=1
chromosome_id=$(cut -f 2 $OUT_DIR/Results/SL_BLAST/"SL-BLAST" | sort -u )
for chr in $chromosome_id
do
	grep $chr$'\t' $OUT_DIR/Results/SL_BLAST/"SL-BLAST" | grep -F -w $chr | awk '{if ($9 < $10) print $1"\t"$4"\t"$9"\t"$10"\tplus"; else print $1"\t"$4"\t"$10"\t"$9"\tminus"}' | sort -n -k 3 >> $OUT_DIR/temp_files/Genome_locis/$chr"-Loci"
	loci_start=$(head -n 1 $OUT_DIR/temp_files/Genome_locis/$chr"-Loci" | cut -f 3)
	loci_end=$(head -n 1 $OUT_DIR/temp_files/Genome_locis/$chr"-Loci" | cut -f 4)
	blast_line=1
	blast_result_number=$(wc -l $OUT_DIR/temp_files/Genome_locis/$chr"-Loci" | cut -f 1 -d " ")
	while [ $blast_line -le $blast_result_number ]
	do
		echo $chr" Blast result Nº"$blast_line" of "$blast_result_number
		sl_start=$(sed -n "$blast_line"p $OUT_DIR/temp_files/Genome_locis/$chr"-Loci" | cut -f 3)
		sl_end=$(sed -n "$blast_line"p $OUT_DIR/temp_files/Genome_locis/$chr"-Loci" | cut -f 4)
		if [ $sl_start -le $loci_end -a $loci_start -le $sl_end ]
		then
			# Adding Loci to the list
			sed -n "$blast_line"p $OUT_DIR/temp_files/Genome_locis/$chr"-Loci" >> $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches"
			# Updating $loci_end
			if [ $sl_end -gt $loci_end ]
			then
				loci_end=$sl_end
			fi
		else
			# Checking if there is an issue with the Loci
			loci_len=$(( $loci_end - $loci_start + 1 ))
			longest_match_control=$(sort -n -k 2 $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches" | tail -n 1 | cut -f 2 )
			longest_match_control_1=$(sort -n -k 2 $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches" | tail -n 1 | awk '{print $2 + 2}')
			longest_match_control_2=$(sort -n -k 2 $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches" | tail -n 1 | awk '{print $2 + 5}')
			longest_match_control_3=$(sort -n -k 2 $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches"| tail -n 1 | awk '{print $2 + 10}')
			if [ $loci_len -ge $longest_match_control_3 ]
			then
				echo -e "Locus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len"\t"$longest_match_control"\t3\tna" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings
			elif [ $loci_len -ge $longest_match_control_2 ]
			then
				echo -e "Locus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len"\t"$longest_match_control"\t2\tna" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings
			elif [ $loci_len -ge $longest_match_control_1 ]
			then
				echo -e "Locus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len"\t"$longest_match_control"\t1\tna" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings
			else
				echo -e "Locus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len"\t"$longest_match_control"\t0\tna" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings
			fi

			# Summaryzing data
			# Loci number - Star - End - Matching Variants
			echo -e  $chr"\tLocus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len >> $OUT_DIR/temp_files/Genome_locis/Loci_location_temp

			# Actualizando loci info
			loci_number=$(( $loci_number + 1 ))
			loci_start=$sl_start
			loci_end=$sl_end
			sed -n "$blast_line"p $OUT_DIR/temp_files/Genome_locis/$chr"-Loci" >> $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches"
		fi
		blast_line=$(( $blast_line + 1 ))
	done
	loci_len=$(( $loci_end - $loci_start + 1 ))
	# Checking if there is an issue with the Loci X2
	longest_match_control=$(sort -n -k 2 $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches" | tail -n 1 | cut -f 2 )
	longest_match_control_1=$(sort -n -k 2 $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches" | tail -n 1 | awk '{print $2 + 2}')
	longest_match_control_2=$(sort -n -k 2 $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches" | tail -n 1 | awk '{print $2 + 5}')
	longest_match_control_3=$(sort -n -k 2 $OUT_DIR/temp_files/Genome_locis/$chr"_Locus-"$loci_number"_pSL-matches"| tail -n 1 | awk '{print $2 + 10}')
	if [ $loci_len -ge $longest_match_control_3 ]
	then
		echo -e "Locus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len"\t"$longest_match_control"\t3\tna" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings
	elif [ $loci_len -ge $longest_match_control_2 ]
	then
		echo -e "Locus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len"\t"$longest_match_control"\t2\tna" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings
	elif [ $loci_len -ge $longest_match_control_1 ]
	then
		echo -e "Locus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len"\t"$longest_match_control"\t1\tna" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings
	else
		echo -e "Locus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len"\t"$longest_match_control"\t0\tna" >> $OUT_DIR/Warnings/Step3_Loci_extension_warnings
	fi
	echo -e  $chr"\tLocus-"$loci_number"\t"$loci_start"\t"$loci_end"\t"$loci_len >> $OUT_DIR/temp_files/Genome_locis/Loci_location_temp
	loci_number=$(( $loci_number + 1 ))
done

## Retrieving sequence data and aligment
echo "
Extracting Loci's sequence and checking donor site"
for chr in $chromosome_id
do
	mkdir $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"
	all_locis=$(grep ^$chr$'\t' $OUT_DIR/temp_files/Genome_locis/Loci_location_temp | grep -F -w $chr | cut -f 2 )
	for loci in $all_locis
	do
		echo $chr" - "$loci
		donor_site_alert=False
		loci_start=$(grep -w $loci $OUT_DIR/temp_files/Genome_locis/Loci_location_temp | cut -f 3)
		loci_end=$(grep -w $loci $OUT_DIR/temp_files/Genome_locis/Loci_location_temp | cut -f 4)
		chr_end=$(grep ^$chr$'\t' $OUT_DIR/temp_files/Reference/Genome_size | grep -F -w $chr | cut -f 2)
		# checking alignment start
		if [ $loci_start -lt 2 ]
		then
			echo "WARNING: "$loci" start is too close to the beginning of the sequence chromosome sequence for proper alignment." >> $OUT_DIR/Warnings/Step3_Sequence-retrieval-warnings
			donor_site_alert=TRUE
			aln_start=$loci_start
		else
			aln_start=$(($loci_start - 2 ))
		fi
		# checking alignment end
		aln_end=$(($loci_end + 2))
		if [ $aln_end -gt $chr_end ]
		then
			echo "WARNING: "$loci" end is too close to the end of the sequence chromosome sequence for proper alignment." >> $OUT_DIR/Warnings/Step3_Sequence-retrieval-warnings
			donor_site_alert=TRUE
			aln_end=$loci_end
		fi
		printf "%s %s %s %s\n%s %s %s\n" $chr" "$aln_start"-"$aln_end" plus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed "/^>/ s/$/_$loci/" | tr -d " " >> $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"-matches.fa"
		hook_variants=$(cut -f 1 $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches")
		for hook in $hook_variants
		do
			strand=$(grep -w $hook $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | cut -f 5)
			if [ "$strand" == "plus" ]
			then
				seqkit grep -p $hook $SL_FILE >> $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"-matches.fa"
			else

				seqkit grep -p $hook $SL_FILE | seqkit seq -t dna -v -p -r -w 0 >> $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"-matches.fa"
			fi
		done
		mafft --quiet --globalpair --thread $THREADS --maxiterate 1000 $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"-matches.fa" > $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci"-matches.al"
		# Checking Donor site
		loci_alert=$(grep -w $loci $OUT_DIR/Warnings/Step3_Loci_extension_warnings | cut -f 6)
		lar_hook=$(sort -k 2 -n -r $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | head -n 1 | cut -f 1 | sed 's/-3prima-.*//' | sed 's/-5prima-.*//')

		loci_trim=$(grep -w ^$loci $OUT_DIR/Warnings/Step3_Loci_extension_warnings | cut -f 4 | awk '{print int($1*0.30)}')

		loci_sequence_F=$(seqkit head -n 1 $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"-matches.fa" | seqkit subseq -r "$loci_trim:-$loci_trim" | seqkit seq -s -t dna -v)
		loci_sequence_R=$(seqkit head -n 1 $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"-matches.fa" | seqkit subseq -r "$loci_trim:-$loci_trim" | seqkit seq -p -r -s -t dna -v)

		Count_seq_Forward=$(seqkit locate -m 1 -P -p $loci_sequence_F $OUT_DIR/Results/Raw_Matches/$lar_hook"-"* | grep -v patternName | grep -c .)
		Count_seq_Reverse=$(seqkit locate -m 1 -P -p $loci_sequence_R $OUT_DIR/Results/Raw_Matches/$lar_hook"-"* | grep -v patternName | grep -c .)

		if [ $Count_seq_Forward -eq $Count_seq_Reverse ]
		then
			seq_orient=Undeterminated
			sed -i "/$loci\t/s/na$/Impossible to establish orientation/" $OUT_DIR/Warnings/Step3_Loci_extension_warnings
		elif [ $Count_seq_Forward -gt $Count_seq_Reverse ]
		then
			Orient_seq_Forward=$(seqkit locate -m 1 -P -p $loci_sequence_F $OUT_DIR/Results/Raw_Matches/$lar_hook"-"* | grep -v patternName | awk -F ":" '{print $1}' | sort | uniq -c | sort -n -r -k 1 | head -n 1 | awk '{print $2}' | sed 's/-forward.*//' | sed 's/-reverse.*//')
			if [ "$Orient_seq_Forward" == "5prima" ]
			then
				seq_orient=Forward
			elif [ "$Orient_seq_Forward" == "3prima" ]
			then
				seq_orient=Reverse
			fi
		elif [ $Count_seq_Forward -lt $Count_seq_Reverse ]
		then
			Orient_seq_Reverse=$(seqkit locate -m 1 -P -p $loci_sequence_R $OUT_DIR/Results/Raw_Matches/$lar_hook"-"* | grep -v patternName | awk -F ":" '{print $1}' | sort | uniq -c | sort -n -r -k 1 | head -n 1 | awk '{print $2}' | sed 's/-forward.*//' | sed 's/-reverse.*//')
			if [ "$Orient_seq_Reverse" == "5prima" ]
			then
				seq_orient=Reverse
			elif [ "$Orient_seq_Reverse" == "3prima" ]
			then
				seq_orient=Forward
			fi
		fi

		echo -e "Hook Variant\tLength\tStart\tEnd\tHook Orientation\tPotential Donor site\tCuration needed\tLocus Orientation: "$seq_orient >> $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab"
		if [ $loci_alert -eq 3 ] || [ ! "$donor_site_alert" == "False" ] || [ "$seq_orient" == "Undeterminated" ]
		then
			for hook in $hook_variants
			do
				grep -w $hook $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | awk '{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\tNot Analyzed\tNot Analyzed"}' >> $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab"
			done
		else
			for hook in $hook_variants
			do
				if [ "$seq_orient" == "Forward" ]
				then
					extract_sl3=$(grep -w $hook $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | awk '{print $4-1"-"$4+2}')
					donor_site=$(printf "%s %s %s %s\n%s %s %s\n" $chr" "$extract_sl3" plus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed '/>/d' | grep -c "GT")
					alert_sl3=$(grep -w $hook $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | awk '{print $4+1"-"$4+2}')
					alert_site=$(printf "%s %s %s %s\n%s %s %s\n" $chr" "$alert_sl3" plus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed '/>/d' | grep -c "GT")
					grep -w $hook $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | awk -v donor=$donor_site -v alert=$alert_site '{if (alert < 1) print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"donor"\tyes"; else  print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"donor"\tno"}' >> $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab"
				elif [ "$seq_orient" == "Reverse" ]
				then
					extract_sl5=$(grep -w $hook $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | awk '{print $3-2"-"$3+1}')
					donor_site=$(printf "%s %s %s %s\n%s %s %s\n" $chr" "$extract_sl5" plus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed '/>/d' | grep -c "AC")
					alert_sl5=$(grep -w $hook $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | awk '{print $3-2"-"$3-1}')
					alert_site=$(printf "%s %s %s %s\n%s %s %s\n" $chr" "$alert_sl5" plus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed '/>/d' | grep -c "AC")
					grep -w $hook $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | awk -v donor=$donor_site -v alert=$alert_site '{if (alert < 1) print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"donor"\tyes"; else  print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"donor"\tno"}' >> $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab"
				fi
			done
		fi

		# Extracting sequence for Annotation
		if [ $loci_start -lt $GENOME_REGION_RANGE ]
		then
			echo "WARNING: "$loci" start is too close to the beginning of the sequence chromosome sequence for proper alignment." >> $OUT_DIR/Warnings/Step3_Sequence-retrieval-warnings
		else
			blastn_start=$(($loci_start - $GENOME_REGION_RANGE ))
		fi

		# checking alignment end
		blastn_end=$(($loci_end + $GENOME_REGION_RANGE))
		if [ $aln_end -gt $chr_end ]
		then
			echo "WARNING: "$loci" end is too close to the end of the sequence chromosome sequence for proper alignment." >> $OUT_DIR/Warnings/Step3_Sequence-retrieval-warnings
			blastn_end=$loci_end
		fi
		printf "%s %s %s %s\n%s %s %s\n" $chr" "$blastn_start"-"$blastn_end" plus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed "/^>/ s/$/_$loci/" | tr -d " " >> $OUT_DIR/temp_files/Genome_locis/All_potential_matches.fa
	done
done

### Annotation - BLAST
echo "Annotating Locis
Constructing reference"
# Making BLAST Reference
makeblastdb -in $ANNOTATION_BLAST_REF -dbtype $ANNOTATION_BLAST_TYPE -parse_seqids -input_type fasta -out $OUT_DIR/temp_files/Reference/Blast_annotation-ref
# Doing the BLAST
mkdir $OUT_DIR/Results/Genome_locis/Blast_annotation
if [ "$ANNOTATION_BLAST_TYPE" == "prot" ]
then
	echo "Doing BLASTX Search"
	blastx -query $OUT_DIR/temp_files/Genome_locis/All_potential_matches.fa -db $OUT_DIR/temp_files/Reference/Blast_annotation-ref -outfmt "7 std" -out $OUT_DIR/Results/Genome_locis/Blast_annotation/"Loci-BLAST" -num_threads $THREADS -evalue "1e-"$BLAST_EVALUE
else
	echo "Doing BLASTN Search"
	blastn -query $OUT_DIR/temp_files/Genome_locis/All_potential_matches.fa -db $OUT_DIR/temp_files/Reference/Blast_annotation-ref -outfmt "7 std" -out $OUT_DIR/Results/Genome_locis/Blast_annotation/"Loci-BLAST" -num_threads $THREADS -evalue "1e-"$BLAST_EVALUE
fi

# Constructing Loci Result Table
echo "Summarizing results"
echo -e "Loci\tScaffold\tLocus extended length\tLocus Orientation\tHook Variants\tDonor Site\tBest pSL ID\tStart-Best\tEnd-Best\tAnnotation Hits\tBest Hit ID\tIdentity\tEvalue" >> $OUT_DIR/Results/Step3_Loci.tab
for chr in $chromosome_id
do
	all_locis=$(grep $chr$'\t' $OUT_DIR/temp_files/Genome_locis/Loci_location_temp | grep -F -w $chr | cut -f 2 )
	for loci in $all_locis
	do
		variable3=$(grep -w ^$loci $OUT_DIR/Warnings/Step3_Loci_extension_warnings | cut -f 4)
		variable4=$(head -n 1 $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab" | sed 's/.*Locus Orientation: //')
		variable5=$(wc -l $OUT_DIR/temp_files/Genome_locis/$chr"_"$loci"_pSL-matches" | cut -f 1 -d " ")
		check_donor_site=$(grep -c "Not Analyzed" $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab")
		if [ $check_donor_site -gt 0 ]
		then
			variable6="Not Analyzed"
			echo -e $loci"\tLocus wasn't reliable for donor site examination" >> $OUT_DIR/Warnings/Step3_Donor_site_warnings
			# If there is no donor site, the best hook variant is the one with the longest alignment
			variable7=$(grep -v ^"Hook Variant" $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab" | sort -n -k 2 | tail -n 1 | cut -f 1 )
		else

			hookv_donorsite=$(grep -v ^"Hook Variant" $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab" | cut -f 6 | grep -c "1")
			threshold_var6=$(grep -v -c ^"Hook Variant" $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab"  | awk '{ print int($1*0.8) }' )
			if [ $hookv_donorsite -eq 0 ]
			then
				variable6="Not detected"
				echo -e $loci"\tNo Donor site was detected" >> $OUT_DIR/Warnings/Step3_Donor_site_warnings
				# If there is no donor site, the best hook variant is the one with the longest alignment
				variable7=$(grep -v ^"Hook Variant" $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab" | sort -n -k 2 | tail -n 1 | cut -f 1 )
			else
				if [ $hookv_donorsite -ge $threshold_var6 ]
				then
					manual_curation_needed=$(grep -v ^"Hook Variant" $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab" | awk '{if ($6 > 0) print }' | sort -n -k 2 | tail -n 1 | cut -f 7 )
					if [ "$variable4" == "Forward" ]
					then
						if [ "$manual_curation_needed" == "yes" ]
						then
							variable6="3prima*"
							echo -e $loci"\tDonor site is totally or partially included in the Hook variant sequence" >> $OUT_DIR/Warnings/Step3_Donor_site_warnings
						else
							variable6="3prima"
						fi
					else
						if [ "$manual_curation_needed" == "yes" ]
						then
							variable6="5prima*"
							echo -e $loci"\tDonor site is totally or partially included in the Hook variant sequence" >> $OUT_DIR/Warnings/Step3_Donor_site_warnings
						else
							variable6="5prima"
						fi
					fi
				else
					variable6="Unclear"
					echo -e $loci"\tMore than 20% of matching Hook Variants does not have a donor site in the expected location" >> $OUT_DIR/Warnings/Step3_Donor_site_warnings
				fi
			# If there is a donor site, the best hook variant is the one with the longest alignment and has a donor site
			variable7=$(grep -v ^"Hook Variant" $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab" | awk '{if ($6 > 0) print }' | sort -n -k 2 | tail -n 1 | cut -f 1 )
			fi
		fi
		variable8=$(grep -w ^$variable7 $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab" | cut -f 3 )
		variable9=$(grep -w ^$variable7 $OUT_DIR/Results/Genome_locis/$chr"_Loci-Data"/$chr"_"$loci".tab" | cut -f 4 )
		variable10=$(grep -P "_"$loci"\t" $OUT_DIR/Results/Genome_locis/Blast_annotation/"Loci-BLAST" | wc -l | cut -f 1 -d " ")
		if [ $variable10 -eq 0 ]
		then
			variable11="-"
			variable12="-"
			variable13="-"
		else
			variable11=$(grep -P "_"$loci"\t" $OUT_DIR/Results/Genome_locis/Blast_annotation/"Loci-BLAST" | head -n 1 | cut -f 2)
			variable12=$(grep -P "_"$loci"\t" $OUT_DIR/Results/Genome_locis/Blast_annotation/"Loci-BLAST" | head -n 1 | cut -f 3)
			variable13=$(grep -P "_"$loci"\t" $OUT_DIR/Results/Genome_locis/Blast_annotation/"Loci-BLAST" | head -n 1 | cut -f 11)
		fi
		echo -e $loci"\t"$chr"\t"$variable3"\t"$variable4"\t"$variable5"\t"$variable6"\t"$variable7"\t"$variable8"\t"$variable9"\t"$variable10"\t"$variable11"\t"$variable12"\t"$variable13 >> $OUT_DIR/Results/Step3_Loci.tab
	done
done

# Retrieving Best SL sequence
echo "Retrieving the sequence of the best pSL"
check_best=FALSE
check_unclear=FALSE

matches=$(grep -v "Loci" $OUT_DIR/Results/Step3_Loci.tab | cut -f 1)
for mat in $matches
do
	annotation=$(grep -w $mat $OUT_DIR/Results/Step3_Loci.tab | cut -f 10)
	if [ $annotation -eq 0 ]
	then
		chromo=$(grep -w $mat $OUT_DIR/Results/Step3_Loci.tab | cut -f 2)
		donor_site=$(grep -w $mat $OUT_DIR/Results/Step3_Loci.tab | cut -f 6 | sed 's/*//')
		coordinates=$(grep -w $mat $OUT_DIR/Results/Step3_Loci.tab | cut -f 8,9 | awk '{print $1"-"$2}')
		orient=$(grep -w $mat $OUT_DIR/Results/Step3_Loci.tab | cut -f 4)
		if [ ! "$donor_site" == "Not Analyzed" ] && [ ! "$donor_site" == "Not detected" ]
		then
			if [ ! "$donor_site" == "Unclear" ]
			then
				if [ "$orient" == "Forward" ]
				then
					printf "%s %s %s %s\n%s %s %s\n" $chromo" "$coordinates" plus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed "/^>/ s/$/-pSL_/" | sed "/^>/ s/$/$mat/" | tr -d " " >> $OUT_DIR/Results/pSL_Loci.fa
					check_best=TRUE
				elif [ "$orient" == "Reverse" ]
				then
					printf "%s %s %s %s\n%s %s %s\n" $chromo" "$coordinates" minus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed "/^>/ s/$/-pSL_/" | sed "/^>/ s/$/$mat/" | tr -d " " >> $OUT_DIR/Results/pSL_Loci.fa
					check_best=TRUE
				fi
			else
				if [ "$orient" == "Forward" ]
				then
					printf "%s %s %s %s\n%s %s %s\n" $chromo" "$coordinates" plus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed "/^>/ s/$/-pSL_/" | sed "/^>/ s/$/$mat/" | tr -d " " >> $OUT_DIR/Results/pSL_Loci_Unclear.fa
					check_unclear=TRUE
				else
					printf "%s %s %s %s\n%s %s %s\n" $chromo" "$coordinates" minus" | blastdbcmd -db $OUT_DIR/temp_files/Reference/Reference_genome-ref -entry_batch - | sed "/^>/ s/$/-pSL_/" | sed "/^>/ s/$/$mat/" | tr -d " " >> $OUT_DIR/Results/pSL_Loci_Unclear.fa
					check_unclear=TRUE
				fi
			fi
		fi
	fi
done

echo "
Clustering pSLs by sequence.
"

if [ "$check_best" == "TRUE" ]
then
	cd-hit-est -d 0 -c 1 -T $THREADS -i $OUT_DIR/Results/pSL_Loci.fa -o $OUT_DIR/temp_files/Genome_locis/SL.temp
	psl_loci=$(grep ">" $OUT_DIR/temp_files/Genome_locis/SL.temp | sed "s/-pSL_/\\t/" | sed "s/>//" | cut -f 2)
	for psl in $psl_loci
	do
		hook_variant=$(grep -w $psl $OUT_DIR/Results/Step3_Loci.tab | cut -f 7 | sed 's/-3prima-.*//' | sed 's/-5prima-.*//')
		seqkit grep -r -p "-pSL_"$psl"$" $OUT_DIR/temp_files/Genome_locis/SL.temp | sed "/>/ s/$/_$hook_variant/" >> $OUT_DIR/Results/SL_Clases.fa
		echo -e $psl"\t"$hook_variant >> $OUT_DIR/temp_files/Genome_locis/SL_hooks.temp
	done
else
	echo "No pSL have a clear Donor site"
fi

if [ "$check_unclear" == "TRUE" ]
then
	cd-hit-est -d 0 -c 1 -T $THREADS -i $OUT_DIR/Results/pSL_Loci_Unclear.fa -o $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp
	psl_loci=$(grep ">" $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp | sed "s/-pSL_/\\t/" | sed "s/>//" | cut -f 2)
	for psl in $psl_loci
	do
		hook_variant=$(grep -w $psl $OUT_DIR/Results/Step3_Loci.tab | cut -f 7 | sed 's/-3prima-.*//' | sed 's/-5prima-.*//')
		seqkit grep -r -p "-pSL_"$psl"$" $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp | sed "/>/ s/$/_$hook_variant/" >> $OUT_DIR/Results/SL_Clases-Unclear.fa
		echo -e $psl"\t"$hook_variant >> $OUT_DIR/temp_files/Genome_locis/SL_hooks.temp
	done
fi

echo "
Checking spliced leader transcripts."
if [ "$check_best" == "TRUE" ] || [ "$check_unclear" == "TRUE" ]
then
	sl_hooks=$(cut -f 2 $OUT_DIR/temp_files/Genome_locis/SL_hooks.temp | sort -u )
	for pslh in $sl_hooks
	do
		mkdir $OUT_DIR/Results/Spliced_leader_transcripts/$pslh"_Transcripts_ID"
		cp $OUT_DIR/temp_files/Blast_search/*"-"$pslh"-ID" $OUT_DIR/Results/Spliced_leader_transcripts/$pslh"_Transcripts_ID"/
		ls $OUT_DIR/Results/Spliced_leader_transcripts/$pslh"_Transcripts_ID"/*"-"$pslh"-ID" | sed 's/.*_Transcripts_ID\///' | sed "s/-$pslh.*//" >> $OUT_DIR/temp_files/Spliced_leader_transcripts/assemblies.temp
	done
	assemblies=$(cat $OUT_DIR/temp_files/Spliced_leader_transcripts/assemblies.temp | sort -u)
	echo "Hooks "$assemblies | tr " " "\t" >> $OUT_DIR/Results/Step3_Spliced_transcripts
	for pslh in $sl_hooks
	do
		table_line=$(echo $pslh)
		for assembly in $assemblies
		do
			if [ -f $OUT_DIR/Results/Spliced_leader_transcripts/$pslh"_Transcripts_ID"/$assembly"-"$pslh"-ID" ]
			then
				count=$(wc -l $OUT_DIR/Results/Spliced_leader_transcripts/$pslh"_Transcripts_ID"/$assembly"-"$pslh"-ID" | cut -f 1 -d " ")
				table_line=$table_line" "$count
			else
				count=0
				table_line=$table_line" "$count
			fi
		done
		echo $table_line | tr " " "\t" >> $OUT_DIR/Results/Step3_Spliced_transcripts
	done
fi


# Basic data

echo "Summarizing results"

genome_ID=$(echo $GENOME_REF | sed 's/.*\///g')
annot_ID=$(echo $ANNOTATION_BLAST_REF | sed 's/.*\///g')
total_loci=$(grep -c -v ^"Loci" $OUT_DIR/Results/Step3_Loci.tab)
clear_loci_n=$(cut -f 6 $OUT_DIR/Results/Step3_Loci.tab | grep -c "prima" )
clear_loci_manual_inspection_n=$(cut -f 6 $OUT_DIR/Results/Step3_Loci.tab | grep "prima" | grep -c -F "*")
unclear_loci_n=$(cut -f 6 $OUT_DIR/Results/Step3_Loci.tab | grep -c "Unclear")
not_detected_loci_n=$(cut -f 6 $OUT_DIR/Results/Step3_Loci.tab | grep -c "Not detected")
not_analyzed_loci_n=$(cut -f 6 $OUT_DIR/Results/Step3_Loci.tab | grep -c "Not Analyzed")
cds_loci_n=$(cut -f 10 $OUT_DIR/Results/Step3_Loci.tab | grep -v "Annotation Hits" | awk '{ if ($0 > 0 ) print}' | grep -c .)

if [ -f $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr ]
then
	cdhit_clusters_clear_n=$(grep -c Cluster $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr)
else
	cdhit_clusters_clear_n=0
fi

echo "####################################
#####   Step3 Summary Report   #####
####################################

### Overview:
Genome Reference file: "$genome_ID"
Genome hit coverage: "$GENOME_MATCH_COVERAGE"
Annotation reference file: "$annot_ID"
Annotation reference type: "$ANNOTATION_BLAST_TYPE"
Annotation range: "$GENOME_REGION_RANGE"pb
Annotation evalue cutoff: 1e-"$BLAST_EVALUE"
" > $OUT_DIR/Step3_Summary

echo $total_loci" of putuative SL Locus were identified:

Putuative Donor Site detection:
	Clear potential Donor Site: "$clear_loci_n" ("$clear_loci_manual_inspection_n" present overlaping with its Hook Variant)
	Unclear Donor Site: "$unclear_loci_n"
	Not Detected: "$not_detected_loci_n"
	Not Analyzed: "$not_analyzed_loci_n"
	Loci close to coding regions: "$cds_loci_n"

###################################################################################

Transcript count for each Hook for pSL:
" >> $OUT_DIR/Step3_Summary
cat $OUT_DIR/Results/Step3_Spliced_transcripts >> $OUT_DIR/Step3_Summary

echo "
###################################################################################
" >> $OUT_DIR/Step3_Summary

# Loci with clear donor site found
if [ -f $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr ]
then
	echo "### Loci with a clear donor site were clustered in "$cdhit_clusters_clear_n" pSL classes." >> $OUT_DIR/Step3_Summary
	sed -i 's/^>/@/' $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr
	sed -i 's/^@.*/&XXX/' $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr
	sed -i '/^@/s/ /_/g' $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr

	cdhit_clusters_clear=$(grep Cluster $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr | sed 's/@//')
	for cluster in $cdhit_clusters_clear
	do
		locis=$(awk -v key="$cluster" 'BEGIN {RS="@"} match($0, key) {print ">"$0 }' $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr | sed 's/\.\.\. .*//' | sed 's/^.*Locus/Locus/' | grep -v ^">" | grep .)
		reference_sequence_ID=$(awk -v key="$cluster" 'BEGIN {RS="@"} match($0, key) {print ">"$0 }' $OUT_DIR/temp_files/Genome_locis/SL.temp.clstr | sed 's/^.*Locus/Locus/' | grep -v ^">" | grep -F "*" | sed 's/\.\.\. .*//' )
		reference_sequence_seq=$(seqkit grep -r -p $reference_sequence_ID"$" $OUT_DIR/Results/pSL_Loci.fa | seqkit seq -s -t dna -v)
		print_cluster=$(echo $cluster | sed 's/XXX$//' | sed 's/_/ /')
		echo -e "
# "$print_cluster"
Representative pSL: "$reference_sequence_ID"\tSequence: "$reference_sequence_seq"
Locus\tScaffold\tLocus extended length\tLocus Orientation\tHook Variants\tDonor Site\tBest pSL ID\tStart-Best\tEnd-Best\tAnnotation Hits\tBest Hit ID\tIdentity\tEvalue" >> $OUT_DIR/Step3_Summary
		for loc in $locis
		do
			grep -w $loc $OUT_DIR/Results/Step3_Loci.tab >> $OUT_DIR/Step3_Summary
		done
	done
else
	echo "### No Loci with a clear donor site were found" >> $OUT_DIR/Step3_Summary
fi

# Loci with unclear donor site found

if [ "$check_unclear" == "TRUE" ]
then
	cdhit_clusters_unclear_n=$(grep -c Cluster $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp.clstr)
	echo "
###################################################################################

	### Loci with a unclear donor site were clustered in "$cdhit_clusters_unclear_n" pSL classes." >> $OUT_DIR/Step3_Summary
	sed -i 's/^>/@/' $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp.clstr
	sed -i 's/^@.*/&XXX/' $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp.clstr
	sed -i '/^@/s/ /_/g' $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp.clstr

	cdhit_clusters_unclear=$(grep Cluster $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp.clstr | sed 's/@//')
	for cluster in $cdhit_clusters_unclear
	do
		locis=$(awk -v key="$cluster" 'BEGIN {RS="@"} match($0, key) {print ">"$0 }' $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp.clstr | sed 's/\.\.\. .*//' | sed 's/^.*Locus/Locus/' | grep -v ^">" | grep .)
		reference_sequence_ID=$(awk -v key="$cluster" 'BEGIN {RS="@"} match($0, key) {print ">"$0 }' $OUT_DIR/temp_files/Genome_locis/Unclear_SL.temp.clstr | sed 's/^.*Locus/Locus/' | grep -v ^">" | grep -F "*" | sed 's/\.\.\. .*//' )
		reference_sequence_seq=$(seqkit grep -r -p $reference_sequence_ID"$" $OUT_DIR/Results/pSL_Loci_Unclear.fa | seqkit seq -s -t dna -v)
		print_cluster=$(echo $cluster | sed 's/XXX$//' | sed 's/_/ /')
		echo -e "
"$print_cluster"
Representative pSL: "$reference_sequence_ID"\tSequence: "$reference_sequence_seq"
Loci\tScaffold\tLocus extended length\tLocus Orientation\tHook Variants\tDonor Site\tBest pSL ID\tStart-Best\tEnd-Best\tAnnotation Hits\tBest Hit ID\tIdentity\tEvalue" >> $OUT_DIR/Step3_Summary
		for loc in $locis
		do
			grep -w $loc $OUT_DIR/Results/Step3_Loci.tab >> $OUT_DIR/Step3_Summary
		done
	done
fi

echo -e "
###################################################################################

### Discarded Loci:

# Loci near CDS:
Loci\tScaffold\tLoci extended length\tLocus Orientation\tHook Variants\tDonor Site\tBest pSL ID\tStart-Best\tEnd-Best\tAnnotation Hits\tBest Hit ID\tIdentity\tEvalue" >> $OUT_DIR/Step3_Summary
grep -v "Loci" $OUT_DIR/Results/Step3_Loci.tab | awk '{ if ($11 > 0 ) print}' >> $OUT_DIR/Step3_Summary

echo -e "
# No donor site detected:
Loci\tScaffold\tLoci extended length\tLocus Orientation\tHook Variants\tDonor Site\tBest pSL ID\tStart-Best\tEnd-Best\tAnnotation Hits\tBest Hit ID\tIdentity\tEvalue" >> $OUT_DIR/Step3_Summary
grep "Not detected" $OUT_DIR/Results/Step3_Loci.tab >> $OUT_DIR/Step3_Summary

echo -e "

# Loci Not Analyzed:
Loci\tScaffold\tLoci extended length\tLocus Orientation\tHook Variants\tDonor Site\tBest pSL ID\tStart-Best\tEnd-Best\tAnnotation Hits\tBest Hit ID\tIdentity\tEvalue" >> $OUT_DIR/Step3_Summary
grep "Not Analyzed" $OUT_DIR/Results/Step3_Loci.tab >> $OUT_DIR/Step3_Summary

echo "
Step 3 is done!!! Thanks for using this pipeline"
exit
