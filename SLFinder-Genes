#!/usr/bin/env bash

##### Default Parameters
GENOME_REF=
GTF_REF=
MINREAD=25
MISSING=5
OUT_DIR=SL_Genes
PAIRED=TRUE
READ1=_1.fastq
READ2=_2.fastq
READS=_1.fastq
READ_OR=fr
SLFILE=SL_tags.fa
THREADS=1
READ_RUN=TRUE
HTSEQ_ID_ATRIBUTE=gene_id
HTSEQ_COUNT_ATRIBUTE=exon

##### Usage
usage() # Help message
{
  echo "Usage Paired end: ./SLFinder-Genes [OTHER PARAMETERS] [-s SL_File ] [-g GENOME.fasta ] [-gt GENOME.gtf (optional)] [-a ASSEMBLIES] [-r1 READ1.fastq] [-r2 READ2.fastq]
Usage Paired end: ./SLFinder-Genes [OTHER PARAMETERS] [-s SL_File ] [-g GENOME.fasta ] [-gt GENOME.gtf (optional)] [-rs READ.fastq] [-p FALSE]
This script takes known SL sequences provided in a Fasta file and retrieves the genes IDs that posses those sequences.

  Packages required to have on the path:
    1) bowtie2
    2) cutadapt
    3) cd-hit-est
    4) htseq-count
    5) samtools
    6) seqkit

  Input options:
    -g,  --genome    Reference genome sequences in FASTA format (If none is provided SLFinder-genes will stop after separating the reads with SL hits)
    -gt, --gtf       Reference genome annotations in GTF format (Must be included along with the reference genome.)
    -gi, --gtfid     Attibute to be used in the GFF to identify feature counts by htseq-count (-i or --idattr= parameter) (Default=gene_id)
    -gc, --gtfco     Attibute to be used in the GFF to make feature counts by htseq-count (-t or --type= parameter) (Default=exon)
    -r1, --read1     String used to identify left paired end reads files (must be on the working directory) (Default: _1.fastq)
    -r2, --read2     String used to identify right paired end reads files (must be on the working directory) (Default: _2.fastq)
    -rs, --readS     String used to identify single end reads files (must be on the working directory, ignored if -p is set to TRUE) (Default: _1.fastq)
    -ro, --reador    Paired end read orientation used for bowtie alignment against te Genome Reference Possible values (f forward, r reverse): fr/rf/ff (Default: fr)
    -p,  --paired    Paired data? TRUE or FALSE (Default: TRUE)
    -s,  --slfile    Fasta file with the SL sequences (Default: SL_tags.fa). Multiple variants/SL classes can be analyced toguether by specifing the same ID in the header, and the specific sequence with .(something) (ej: SLXX.1)

  Filtering options:
    -m, --missing   Maximun expected missing data from the true SL sequence (Crucial if you are using SLFinder results) (Default: 5 pb)
    -M, --minread   Minimal read lenght to keep after removing the SL (set to 1 for no trimming) (Default: 25 pb)

  Other options:
    -re, --slread   Identify reads with SLs (set to FALSE if using a previous run) (Default: TRUE)
    -o, --outdir    Directory where to store the output and temporary files (Default: SL-analysis)
    -t, --threads   Number of processors to use when possible (cd-hit-est, MAFFT) (Default=1)
    -h, --help      This help message.
"
exit
}

paste_summary ()
{
  cat $paste_files | awk -F "\t" '{if ($2>0) print $1}' | sort -u >> $OUT_DIR/temp_files/Raw_counts/$temp_name"_paste.temp"
  paste $paste_files | awk -F "\t" '{ for (i=3;i<=NF;i+=2) $i="" } 1' | sed "s/  / /g" | tr " " "\t" | grep -w -f $OUT_DIR/temp_files/Raw_counts/$temp_name"_paste.temp" >> $paste_out
}

##### Reading Parameters
while [ "$1" != "" ]; do
  case $1 in
    -g | --genome )   shift
                      GENOME_REF=$1
                      ;;
    -gt | --gtf )     shift
                      GTF_REF=$1
                      ;;
    -gi | --gtfid )   shift
                      HTSEQ_ID_ATRIBUTE=$1
                      ;;
    -gc | --gtfco )   shift
                      HTSEQ_COUNT_ATRIBUTE=$1
                      ;;
    -m | --missing )  shift
                      MISSING=$1
                      ;;
    -M | --minread )  shift
                      MINREAD=$1
                      ;;
    -p | --paired )   shift
                      PAIRED=$1
                      ;;
    -o | --outdir )   shift
                      OUT_DIR=$1
                      ;;
    -re | --slread )  shift
                      READ_RUN=$1
                      ;;
    -r1 | --read1 )   shift
                      READ1=$1
                      ;;
    -r2 | --read2 )   shift
                      READ2=$1
                      ;;
    -rs | --readS )   shift
                      READS=$1
                      ;;
    -ro | --reador )  shift
                      READ_OR=$1
                      ;;
    -s | --slfile )   shift
                      SLFILE=$1
                      ;;
    -t | --threads )  shift
                      THREADS=$1
                      ;;
    -h | --help )     usage
                      exit
                      ;;
    * )               usage
                      exit 1
  esac
  shift
done

##### Checking if all programs are installed
hash bowtie2 2>/dev/null || { echo >&2 "bowtie2 seems to not be installed or added to the Path. Aborting."; exit 1; }
hash cd-hit-est 2>/dev/null || { echo >&2 "cd-hit-est seems to not be installed or added to the Path. Aborting."; exit 1; }
hash htseq-count 2>/dev/null || { echo >&2 "htseq-count seems to not be installed or added to the Path. Aborting."; exit 1; }
hash seqkit 2>/dev/null || { echo >&2 "seqkit seems to not be installed or added to the Path. Aborting."; exit 1; }
hash samtools 2>/dev/null || { echo >&2 "samtools seems to not be installed or added to the Path. Aborting."; exit 1; }
hash cutadapt 2>/dev/null || { echo >&2 "cutadapt seems to not be installed or added to the Path. Aborting."; exit 1; }

##### Parameter validation
# Reference genome fasta file and GTF exist
if [ ! -z "$GENOME_REF" ]
then
  reference_genome=$(seqkit stats $GENOME_REF)
  if [ -z "$reference_genome" ]
  then
  	echo "Invalid reference genome file: "$GENOME_REF
  	exit 1
  fi
  if [ ! -f $GTF_REF ]
  then
    echo "No GTF anotation file: "$GTF_REF
    exit 1
  fi
fi

# Valid PARIED
if [ ! "$PAIRED" == "TRUE" ] && [ ! "$PAIRED" == "FALSE" ] # Averiguar si funciona
then
  echo "Invalid -p value: "$PAIRED
  echo "Must be TRUE or FALSE"
  exit 1
fi

# Read files exist and are valid
if [ "$PAIRED" == "TRUE" ]
then
  data_reads=$(ls *$READ1 | sed "s/$READ1//")
  if [ -z "$data_reads" ]
  then
    echo "No read files found with ls *"$READ1
    exit 1
  fi

  for read in $data_reads
  do
  # Files exist
    if [ ! -f $read$READ1 ] || [ ! -f $read$READ2 ]
    then
      echo "Missing files for dataset: "$read
      exit 1
    fi
  done

  if [ ! "$READ_RUN" == "TRUE" ] && [ ! "$READ_RUN" == "FALSE" ]
  then
    echo "Invalid -re value: "$READ_RUN
    echo "Must be TRUE or FALSE"
    exit 1
  fi

  # Valid read Orientation
  if [ ! "$READ_OR" == "fr" ] && [ ! "$READ_OR" == "rf" ] && [ ! "$READ_OR" == "ff" ]
  then
    echo "Invalid -ro value: "$READ_OR
    echo "Must be: fr - rf - ff"
    exit 1
  fi
else
  data_reads=$(ls *$READS | sed "s/$READS//")
  if [ -z $data_reads ]
  then
    echo "No files found with: *"$READS
    exit 1
  fi
fi

# OUT_DIR name is provided and it doesn't exist
if [ -z $OUT_DIR ]
then
  echo "No OUT_DIR detected."
  exit 1
else
  if [ "$READ_RUN" == "TRUE" ]
  then
    if [ -d $OUT_DIR ]
    then
      echo "There already is an output directory named: "$OUT_DIR
      exit 1
    fi
  else
    if [ ! -d $OUT_DIR ]
    then
      echo "-re is set to: "$READ_RUN
      echo "No "$OUT_DIR" output folder found"
      exit 1
    fi
  fi
fi

# SLFILE exists and is a fasta file
sl_secuences=$(ls $SLFILE)
if [ -z "$sl_secuences" ]
then
  echo "No SL file detected in: "$SLFILE
  exit 1
else
  is_fasta=$(seqkit stats $SLFILE)
  if [ -z "$sl_secuences" ]
  then
    echo $SLFILE" isn't a fasta file or its damaged"
    exit 1
  fi
fi

# MINREAD is a valid number
if [[ ! "$MINREAD" =~ ^[0-9]+$ ]]
then
  echo "-M value must be an integir: "$MINREAD
  exit 1
else
  if [ $MINREAD -eq 0 ]
  then
    echo "Invalid -M value: "$MINREAD
    exit 1
  fi
fi

# MISSING is a valid number
if [[ ! "$MISSING" =~ ^[0-9]+$ ]]
then
  echo "-m value must be an integir: "$MISSING
  exit 1
fi

# THREADS is a valid number
if [[ ! "$THREADS" =~ ^[0-9]+$ ]]
then
  echo "-t value must be an integir: "$THREADS
  exit 1
else
  if [ $THREADS -eq 0 ]
  then
    echo "Invalid -t value: "$THREADS
    exit 1
  fi
fi

# Needed Directories
mkdir $OUT_DIR
mkdir $OUT_DIR/temp_files
cd-hit-est -d 0 -c 1 -T $THREADS -i $SLFILE -o $OUT_DIR/temp_files/"partial_query_temp.fa"
echo ""
check_pre_cd_hit=$(grep -c ">" $SLFILE)
check_post_cd_hit=$(grep -c ">" $OUT_DIR/temp_files/"partial_query_temp.fa")
if [ ! $check_pre_cd_hit -eq $check_post_cd_hit ]
then
  echo -e "Some of your tags are redundant. All sequences must be different and not subsequences of one to another.\n Run this if in doubt: cd-hit-est -c 1 -i SL_File.fa -o Output_File"
  exit 1
fi

check_uniq_ids=$(grep ^">" $SLFILE | awk '{print $1}' | uniq -d | grep -c .)
if [ $check_uniq_ids -gt 0 ]
then
  echo -e "Repeated equence TAG.\n Veryfy it by running: grep ^\">\" $SLFILE | awk '{print $1}'"
  exit 1
else
    sl_tags=$(grep ^">" $SLFILE | awk '{print $1}' | sed "s/>//")
  for sl in $sl_tags
  do
    sl_lenth=$(grep $sl $SLFILE | awk '{print $2}')
    if [[ ! "$sl_lenth" =~ ^[0-9]+$ ]]
    then
      echo "Can't read "$sl" expected length:"$sl_lenth
      echo "The header must be:"
      echo ">SL_ID XX"
      exit 1
    fi
  done
fi

##### Program execution
if [ "$READ_RUN" == "TRUE" ]
then
  ### Creation of necesary directories
  # Temporal files
  mkdir $OUT_DIR/temp_files/SL_queries
  mkdir $OUT_DIR/temp_files/read_SL
  mkdir $OUT_DIR/temp_files/read_SL_tab

  # Results
  mkdir $OUT_DIR/Results
  mkdir $OUT_DIR/Results/read_SL

  seqkit fx2tab -n -l -i $SLFILE | sed "s/\t\t\t/\t/g" >> $OUT_DIR/temp_files/$SLFILE"_len.temp"

  if [ "$PAIRED" == "TRUE" ]
  then
    for read in $data_reads
    do
      echo $read$READ1
      seqkit fx2tab -n -l -i $read$READ1 | sed "s/\/1\t/\t/" >> $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_1.tab"
      seqkit locate -j $THREADS -f $SLFILE $read$READ1 | sed "1d" >> $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab"

      echo $read$READ2
      seqkit fx2tab -n -l -i $read$READ2  | sed "s/\/2\t/\t/" >> $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_2.tab"
      seqkit locate -j $THREADS -f $SLFILE $read$READ2 | sed "1d" >> $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab"

      # Remove reads with SL hits on both ends
      cut -f 1 $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab" | sed "s/\//\t/" | awk '{print $1}' | sed "s/\/1$//" >> $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test"
      cut -f 1 $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab" | sed "s/\//\t/" | awk '{print $1}' | sed "s/\/2$//" >> $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test"
      sort $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test" | uniq -d >> $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test_2"

      check_doble_sl_hit=$(grep -c . $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test_2")
      if [ $check_doble_sl_hit -eq 0 ]
      then
        echo "No read pair had multiple SL tag hits"
        rm $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test"
      else
        echo $check_doble_sl_hit" Read pair had multiple SL tag hits"
        echo "Removing"
        grep -v -w -f $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test_2" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab_temp"
        rm $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab"
        mv $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab_temp" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab"

        grep -v -w -f $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test_2" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab_temp"
        rm $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab"
        mv $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab_temp" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab"
        rm $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test"
      fi

      # Simplifing the reads lenght tabs
      echo "Index"
      cat $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_"*".tab" | awk -F "\t" '{print $1}' | sed "s/\/1$//" | sed "s/\/2$//" | sort -u >> $OUT_DIR/temp_files/read_SL_tab/$read"_simplifing_index.temp"
      grep -w -F -f $OUT_DIR/temp_files/read_SL_tab/$read"_simplifing_index.temp" $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_1.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_work_1.tab"
      grep -w -F -f $OUT_DIR/temp_files/read_SL_tab/$read"_simplifing_index.temp" $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_2.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_work_2.tab"

      # Adding read length to the location files
      check_read_format_1=$(seqkit head $read$READ1 | grep -c "\/1")
      check_read_format_2=$(seqkit head $read$READ2 | grep -c "\/2")

      sl_read_1=$(awk -F "\t" '{print $1}' $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab" | sed "s/\/1$//")
      sl_read_2=$(awk -F "\t" '{print $1}' $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab" | sed "s/\/2$//")

      for interest_read in $sl_read_1
      do
        interest_read_len=$(grep -w ^$interest_read $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_work_1.tab" | grep -F -w $interest_read | awk -F "\t" '{print $2}')
        if [ $check_read_format_1 -gt 0 ]
        then
          interest_read=$(echo $interest_read"\/1")
        fi
        sed -i "/^$interest_read/ s/$/\t$interest_read_len/" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab"
      done

      for interest_read in $sl_read_2
      do
        interest_read_len=$(grep -w ^$interest_read $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_work_2.tab" | grep -F -w $interest_read | awk -F "\t" '{print $2}')
        if [ $check_read_format_2 -gt 0 ]
        then
          interest_read=$(echo $interest_read"\/2")
        fi
        sed -i "/^$interest_read/ s/$/\t$interest_read_len/" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab"
      done

      echo "Retrieving reads with SL hits"
      for sl in $sl_tags
      do
        echo "Processing: "$read" - "$sl
        sl_len=$(grep $sl $SLFILE | awk '{print $2}')
        tolerance=$(($sl_len + $MISSING))

        # Selecting reads
        grep -F -w $sl $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab" | awk -F "\t" -v min=$MINREAD -v tol=$tolerance '{if ($4=="+" && $6<=tol && $8-$6>=min) print $1; else if ($4=="-" && $5>=min && $8-$5+1<=tol) print $1}' >> $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected.tab"
        grep -F -w $sl $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_2.tab" | awk -F "\t" -v min=$MINREAD -v tol=$tolerance '{if ($4=="+" && $6<=tol && $8-$6>=min) print $1; else if ($4=="-" && $5>=min && $8-$5+1<=tol) print $1}' >> $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected.tab"

        sed "s/\/2$/\/1/" $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected_1.tab"
        sed "s/\/1$/\/2/" $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected_2.tab"

        #### Solo porque me quedó más comodo de esa forma para los archivos output, eso se hace en 2 etapas
        #### Por cada SL verifico si hay hits con check_hits_existence_1 y check_hits_existence_2
        check_hits_existence_1=$(grep -c . $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected_1.tab")
        check_hits_existence_2=$(grep -c . $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected_2.tab")

        if [ $check_hits_existence_1 -gt 0 ] && [ $check_hits_existence_2 -gt 0 ]
        then
          echo $sl >> $OUT_DIR"/temp_files/SL_TAGS_FOUND.temp"
          sl_len=$(grep -F -w $sl $OUT_DIR/temp_files/$SLFILE"_len.temp" | awk -F " " '{print $2}')
          forward_adapter=$(seqkit grep -p $sl $SLFILE | seqkit seq -t DNA -v -s -u)
          reverse_adapter=$(seqkit grep -p $sl $SLFILE | seqkit seq -t DNA -v -s -u -r -p -v)

          cutadapt -j $THREADS --quiet --pair-filter both -g $forward_adapter -a $reverse_adapter -G $forward_adapter -A $reverse_adapter -e 0 --no-indels -O $sl_len --discard-untrimmed -o $OUT_DIR/temp_files/read_SL/$read"_"$sl"_temp_1.fastq" -p $OUT_DIR/temp_files/read_SL/$read"_"$sl"_temp_2.fastq" $read$READ1 $read$READ2
          echo "Done cutadapt"
          seqkit grep -j $THREADS -f $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected_1.tab" $OUT_DIR/temp_files/read_SL/$read"_"$sl"_temp_1.fastq" >> $OUT_DIR/Results/read_SL/$read"_"$sl"_reads_filtered_1.fq"
          seqkit grep -j $THREADS -f $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected_2.tab" $OUT_DIR/temp_files/read_SL/$read"_"$sl"_temp_2.fastq" >> $OUT_DIR/Results/read_SL/$read"_"$sl"_reads_filtered_2.fq"
        else
          echo "No hits for: "$sl" in "$read
        fi
      done
    done
  elif [ "$PAIRED" == "FALSE" ]
  then
    for read in $data_reads
    do
      echo $read$READS
      seqkit fx2tab -n -l -i $read$READS | sed "s/\t\t\t/\t/g"  | awk -F "\t" '{print $0"\t"NR}' | sort -k 1 >> $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_1.tab"
      seqkit locate -j $THREADS -f $SLFILE $read$READS | sed "1d" >> $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab"

      # Remove reads with SL hits on both ends
      awk -F "\t" '{print $1}' $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test"
      sort $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test" | uniq -d >> $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test_2"

      check_doble_sl_hit=$(grep -c . $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test_2")
      if [ $check_doble_sl_hit -eq 0 ]
      then
        echo "No read pair had multiple SL tag hits"
        rm $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test"
      else
        echo $check_doble_sl_hit" Read pair had multiple SL tag hits"
        echo "Removing"
        grep -v -w -f $OUT_DIR/temp_files/read_SL_tab/$read"_both_ends_Test_2" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab_temp"
        rm $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab"
        mv $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab_temp" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab"
      fi

      # Simplifing the "index" -->>> this thing is so I have to do THE thing less often
      cat $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_"*".tab" | awk -F "\t" '{print $1}' | sed "s/\/1$//" | sed "s/\/2$//" | sort -u >> $OUT_DIR/temp_files/read_SL_tab/$read"_simplifing_index.temp"
      echo "Simplifing index"
      grep -w -F -f $OUT_DIR/temp_files/read_SL_tab/$read"_simplifing_index.temp" $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_1.tab" >> $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_work_1.tab"

      # Adding read length to the location files
      check_read_format_1=$(seqkit head $read$READ1 | grep -c "\/1")
      sl_read_1=$(awk -F "\t" '{print $1}' $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab")

      for interest_read in $sl_read_1
      do
        interest_read_len=$(grep -w ^$interest_read $OUT_DIR/temp_files/read_SL_tab/$read"_reads_len_work_1.tab" | grep -F -w $interest_read | awk -F "\t" '{print $2}')
        if [ $check_read_format_1 -gt 0 ]
        then
          interest_read=$(echo $interest_read"\/1")
        fi
        sed -i "/^$interest_read/ s/$/\t$interest_read_len/" $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab"
      done

      echo "Retrieving reads with SL hits"
      for sl in $sl_tags
      do
        sl_len=$(grep $sl $SLFILE | awk '{print $2}')
        tolerance=$(($sl_len + $MISSING))
        check_hits_existence_1=$(grep -c . $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab")

        # Selecting reads
        grep -F -w $sl $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab" | awk -F "\t" -v min=$MINREAD -v tol=$tolerance '{if ($4=="+" && $6<=tol && $8-$6>=min) print $1; else if ($4=="-" && $5>=min && $8-$5+1<=tol) print $1}' >> $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected.tab"
        check_hits_existence_1=$(grep -c . $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected_1.tab")

        if [ $check_hits_existence_1 -gt 0 ]
        then
          echo $sl >> $OUT_DIR"/temp_files/SL_TAGS_FOUND.temp"
          sl_len=$(grep -F -w $sl $OUT_DIR/temp_files/$SLFILE"_len.temp" | awk -F " " '{print $2}')
          forward_adapter=$(seqkit grep -p $sl $SLFILE | seqkit seq -t DNA -v -s -u)
          reverse_adapter=$(seqkit grep -p $sl $SLFILE | seqkit seq -t DNA -v -s -u -r -p -v)
          cutadapt -j $THREADS --quiet -g $forward_adapter -a $reverse_adapter -e 0 --no-indels -O $sl_len --discard-untrimmed -o $OUT_DIR/temp_files/read_SL/$read"_"$sl"_temp_1.fastq" $read$READS
          seqkit grep -j $THREADS -f $OUT_DIR/temp_files/read_SL_tab/$read"_"$sl"_SL_selected.tab" $OUT_DIR/temp_files/read_SL/$read"_"$sl"_temp_1.fastq" >> $OUT_DIR/Results/read_SL/$read"_"$sl"_reads_filtered_1.fq"
        else
          echo "No hits for: "$sl" in "$read
        fi
      done
    done
  fi
else
  rm -r $OUT_DIR/temp_files/reference
  rm -r $OUT_DIR/temp_files/Bowtie2_Alignments
  rm -r $OUT_DIR/temp_files/Htseq_SAM
  rm -r $OUT_DIR/temp_files/Raw_counts

  rm $OUT_DIR/Results/*"_hits.tab"
  rm -r $OUT_DIR/Results/Bowtie2_Alignments
  rm -r $OUT_DIR/Results/Raw_counts
  rm -r $OUT_DIR/Results/SL_Hits
  rm -r $OUT_DIR/Results/Potential_aceptor_sites
fi

echo "Reads have been extracted
"
if [ ! -z "$GENOME_REF" ]
then
  # generate folders Temp:
  mkdir $OUT_DIR/temp_files/reference
  mkdir $OUT_DIR/temp_files/Bowtie2_Alignments
  mkdir $OUT_DIR/temp_files/Htseq_SAM
  mkdir $OUT_DIR/temp_files/Raw_counts

  # generate folders Result:
  mkdir $OUT_DIR/Results/Bowtie2_Alignments
  mkdir $OUT_DIR/Results/Raw_counts
  mkdir $OUT_DIR/Results/SL_Hits
  mkdir $OUT_DIR/Results/Potential_aceptor_sites

  echo "Making Reference Index"
  bowtie2-build -q --threads $THREADS $GENOME_REF $OUT_DIR/temp_files/reference/reference_index

  sl_tags_2=$(cat $OUT_DIR"/temp_files/SL_TAGS_FOUND.temp" | sort -u)

  for sl in $sl_tags_2
  do
    header=$(echo "Gene_ID")
    for read in $data_reads
    do
      if [ -f $OUT_DIR/Results/read_SL/$read"_"$sl"_reads_filtered_1.fq" ]
      then
        if [ "$PAIRED" == "TRUE" ]
        then
          echo ""
          echo "Processing "$sl" hits for: "$read

          bowtie2 --no-mixed --no-discordant --end-to-end --$READ_OR --threads $THREADS -x $OUT_DIR/temp_files/reference/reference_index -1 $OUT_DIR/Results/read_SL/$read"_"$sl"_reads_filtered_1.fq" -2 $OUT_DIR/Results/read_SL/$read"_"$sl"_reads_filtered_2.fq" -S $OUT_DIR/temp_files/Bowtie2_Alignments/$read"_"$sl"_alignment.sam"
          echo "Sorting SAM"
          samtools sort -@ $THREADS -n -o $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" $OUT_DIR/temp_files/Bowtie2_Alignments/$read"_"$sl"_alignment.sam"
          echo "Counting hits"

          htseq-count --format=sam --idattr=$HTSEQ_ID_ATRIBUTE --stranded=no -r name --type=$HTSEQ_COUNT_ATRIBUTE --samout $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_htseq_gene_name.sam" -q $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" $GTF_REF >> $OUT_DIR/Results/Raw_counts/$read"_"$sl"_raw_htseq.counts"

          echo "Separating pairs of reads"
          # First pair
          samtools view -@ $THREADS -h -f 64 $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" >> $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_1.sam"
          samtools view -@ $THREADS -h -f 16 $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_1.sam" >> $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_reverse_1.sam"
          # Second pair
          samtools view -@ $THREADS -h -f 128 $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" >> $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_2.sam"
          samtools view -@ $THREADS -h -f 16 $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_2.sam">> $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_reverse_2.sam"

          echo "Analyzing potential donor sites..."
          aceptor_gene=$(grep -v "__" $OUT_DIR/Results/Raw_counts/$read"_"$sl"_raw_htseq.counts" | awk -F "\t" '{if ($2>0) print $1}')
          feature_name=$(grep -v "__" $OUT_DIR/Results/Raw_counts/$read"_"$sl"_raw_htseq.counts" | awk -F ":" '{print $1}' | sort -u)

          for feat in $feature_name
          do
            aceptor_gene=$(echo $aceptor_gene | sed "s/$feat://g")
          done

          echo "Checking Acceptor Sites"
          for aceptor in $aceptor_gene
          do
            acepting_reads=$(grep -F -w $aceptor $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_htseq_gene_name.sam" | awk -F "\t" '{print $1}' | sort -u)
            for sl_read in $acepting_reads
            do
              read_pair=$(grep -w ^$sl_read $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location"* | sed "s/.*location_//" | sed "s/.tab.*//") # El num de par lo saco del nombre del archivo
              acepting_end=$(grep -w ^$sl_read $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_"$read_pair".tab" | awk -F "\t" '{if ($4=="+") print "left"; else print "right"}' )
              reverse_strand=$(grep -c -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_reverse_"$read_pair".sam")

              if [ $reverse_strand -eq 0 ]
              then
                read_len=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_"$read_pair".sam" | awk '{print length($10)}')
                if [ "$acepting_end" == "left" ]
                then
                  aceptor_site_chromosome=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_"$read_pair".sam" | awk -F "\t" '{print $3}')
                  aceptor_site_location=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_"$read_pair".sam" | awk -F "\t" '{print $4}')

                  if [ $aceptor_site_location -gt 2 ]
                  then
                    aceptor_site_extract=$(echo $aceptor_site_location | awk '{print $1-2":"$1-1}')
                    aceptor_site_sequence=$(seqkit subseq -j $THREADS -r $aceptor_site_extract --chr $aceptor_site_chromosome --gtf $GTF_REF $GENOME_REF | seqkit seq -t DNA -v -s -u)
                    check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)
                    if [ $check_sec_len -eq 2 ]
                    then
                      valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                    else
                      aceptor_site_sequence=NA
                      valid_aceptor_site=Coting_Boundary
                    fi
                  else
                    aceptor_site_sequence=NA
                    valid_aceptor_site=Coting_Boundary
                  fi

                  aceptor_site_location=$(($aceptor_site_location - 1))
                  # Gen ID, Position, Valid Aceptor site, Aceptor Site location, Aceptor Site Sequence, Read ID, read pair
                  echo -e $aceptor"\t"$valid_aceptor_site"\t"$aceptor_site_location"\t"$aceptor_site_sequence"\t"$sl_read"\t"$read_pair >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab"
                else
                  aceptor_site_chromosome=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_"$read_pair".sam" | awk -F "\t" '{print $3}')
                  aceptor_site_location=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_"$read_pair".sam" | awk -F "\t" -v len=$read_len '{print $4+len}')
                  if [ $aceptor_site_location -gt 0 ]
                  then
                    aceptor_site_extract=$(echo $aceptor_site_location | awk '{print $1":"$1+1}')
                    aceptor_site_sequence=$(seqkit subseq -j $THREADS -r $aceptor_site_extract --chr $aceptor_site_chromosome --gtf $GTF_REF $GENOME_REF | seqkit seq -t DNA -v -s -u -r -p -v)
                    check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)

                    if [ $check_sec_len -eq 2 ]
                    then
                      valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                    else
                      aceptor_site_sequence=NA
                      valid_aceptor_site=Coting_Boundary
                    fi
                  else
                    aceptor_site_sequence=NA
                    valid_aceptor_site=Coting_Boundary
                  fi
                  valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                  # Gen ID, Position, Valid Aceptor site, Aceptor Site location, Aceptor Site Sequence, Read ID, read pair
                  echo -e $aceptor"\t"$valid_aceptor_site"\t"$aceptor_site_location"\t"$aceptor_site_sequence"\t"$sl_read"\t"$read_pair >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab"
                fi
              else
                read_len=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_reverse_"$read_pair".sam" | awk '{print length($10)}')
                if [ "$acepting_end" == "left" ]
                then
                  aceptor_site_chromosome=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_reverse_"$read_pair".sam" | awk -F "\t" '{print $3}')
                  aceptor_site_location=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_reverse_"$read_pair".sam" | awk -F "\t" -v len=$read_len '{print $4+len}')

                  if [ $aceptor_site_location -gt 0 ]
                  then
                    aceptor_site_extract=$(echo $aceptor_site_location | awk '{print $1":"$1+1}')
                    aceptor_site_sequence=$(seqkit subseq -j $THREADS -r $aceptor_site_extract --chr $aceptor_site_chromosome --gtf $GTF_REF $GENOME_REF | seqkit seq -t DNA -v -s -u -r -p -v)
                    check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)
                    if [ $check_sec_len -eq 2 ]
                    then
                      valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                    else
                      aceptor_site_sequence=NA
                      valid_aceptor_site=Coting_Boundary
                    fi
                  else
                    aceptor_site_sequence=NA
                    valid_aceptor_site=Coting_Boundary
                  fi
                  echo -e $aceptor"\t"$valid_aceptor_site"\t"$aceptor_site_location"\t"$aceptor_site_sequence"\t"$sl_read"\t"$read_pair >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab"
                else
                  aceptor_site_chromosome=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_reverse_"$read_pair".sam" | awk -F "\t" '{print $3}')
                  aceptor_site_location=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_readpair_reverse_"$read_pair".sam" | awk -F "\t" '{print $4}')

                  if [ $aceptor_site_location -gt 2 ]
                  then
                    aceptor_site_extract=$(echo $aceptor_site_location | awk '{print $1-2":"$1-1}')
                    aceptor_site_sequence=$(seqkit subseq -j $THREADS -r $aceptor_site_extract --chr $aceptor_site_chromosome --gtf $GTF_REF $GENOME_REF | seqkit seq -t DNA -v -s -u)
                    check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)

                    if [ $check_sec_len -eq 2 ]
                    then
                      valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                    else
                      aceptor_site_sequence=NA
                      valid_aceptor_site=Coting_Boundary
                    fi
                  else
                    aceptor_site_sequence=NA
                    valid_aceptor_site=Coting_Boundary
                  fi
                  aceptor_site_location=$(($aceptor_site_location - 1))
                  echo -e $aceptor"\t"$valid_aceptor_site"\t"$aceptor_site_location"\t"$aceptor_site_sequence"\t"$sl_read"\t"$read_pair >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab"
                fi
              fi
            done
          done
        elif [ "$PAIRED" == "FALSE" ]
        then
          echo ""
          echo "Processing "$sl" hits for: "$read

          bowtie2 --end-to-end --threads $THREADS -x $OUT_DIR/temp_files/reference/reference_index -U $OUT_DIR/Results/read_SL/$read"_"$sl"_reads_filtered_1.fq" -S $OUT_DIR/temp_files/Bowtie2_Alignments/$read"_"$sl"_alignment.sam" # Consultar por las mejores opciones para esto
          echo "Sorting SAM"
          samtools sort -@ $THREADS -n -o $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" $OUT_DIR/temp_files/Bowtie2_Alignments/$read"_"$sl"_alignment.sam"

          echo "Counting hits"
          htseq-count --format=sam --stranded=no -r name --type=exon --samout $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_htseq_gene_name.sam" -q $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" $GTF_REF >> $OUT_DIR/Results/Raw_counts/$read"_"$sl"_raw_htseq.counts"
          feature_name=$(grep -v "__" $OUT_DIR/Results/Raw_counts/$read"_"$sl"_raw_htseq.counts" | awk -F ":" '{print $1}' | sort -u)

          echo "Separating reverse hits"
          # Reverse Strand Hits
          samtools view -@ $THREADS -h -f 16 $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" >> $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_reverse_1.sam"

          aceptor_gene=$(grep -v "__" $OUT_DIR/Results/Raw_counts/$read"_"$sl"_raw_htseq.counts" | awk -F "\t" '{if ($2>0) print $1}')
          for feat in $feature_name
          do
            aceptor_gene=$(echo $aceptor_gene | sed "s/$feat://g")
          done

          echo "Checking Acceptor Sites"
          for aceptor in $aceptor_gene
          do
            acepting_reads=$(grep -F -w $aceptor $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_htseq_gene_name.sam" | awk -F "\t" '{print $1}' | sort -u)
            for sl_read in $acepting_reads
            do
              acepting_end=$(grep -w ^$sl_read $OUT_DIR/temp_files/read_SL_tab/$read"_SL_location_1.tab" | awk -F "\t" '{if ($4=="+") print "left"; else print "right"}' )
              reverse_strand=$(grep -F -w -c $sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_reverse_1.sam")
              if [ $reverse_strand -eq 0 ]
              then
                read_len=$(grep -w ^$sl_read $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" | awk '{print length($10)}')
                if [ "$acepting_end" == "left" ]
                then
                  echo "Determinando Cromosoma"
                  aceptor_site_chromosome=$(grep -w ^$sl_read $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" | awk -F "\t" '{print $3}')
                  aceptor_site_location=$(grep -w ^$sl_read $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" | awk -F "\t" '{print $4-1}')

                  if [ $aceptor_site_location -gt 1 ]
                  then
                    aceptor_site_extract=$(echo $aceptor_site_location | awk '{print $1-2":"$1-1}')
                    aceptor_site_sequence=$(seqkit subseq -j $THREADS -r $aceptor_site_extract --chr $aceptor_site_chromosome --gtf $GTF_REF $GENOME_REF | seqkit seq -t DNA -v -s -u)

                    check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)
                    if [ $check_sec_len -eq 2 ]
                    then
                      valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                    else
                      aceptor_site_sequence=NA
                      valid_aceptor_site=Coting_Boundary
                    fi
                  else
                    aceptor_site_sequence=NA
                    valid_aceptor_site=Coting_Boundary
                  fi
                  aceptor_site_location=$(($aceptor_site_location - 1))
                  # Gen ID, Position, Valid Aceptor site, Aceptor Site location, Aceptor Site Sequence, Read ID, read pair
                  echo -e $aceptor"\t"$valid_aceptor_site"\t"$aceptor_site_location"\t"$aceptor_site_sequence"\t"$sl_read"\t"$read_pair >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab"
                else
                  aceptor_site_chromosome=$(grep -w ^$sl_read $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" | awk -F "\t" '{print $3}')
                  aceptor_site_location=$(grep -w ^$sl_read $OUT_DIR/Results/Bowtie2_Alignments/$read"_"$sl"_sorted.sam" | awk -F "\t" -v len=$read_len '{print $4+len}')
                  check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)

                  if [ $aceptor_site_location -gt 0 ]
                  then
                    aceptor_site_extract=$(echo $aceptor_site_location | awk '{print $1":"$1+1}')
                    aceptor_site_sequence=$(seqkit subseq -j $THREADS -r $aceptor_site_extract --chr $aceptor_site_chromosome --gtf $GTF_REF $GENOME_REF | seqkit seq -t DNA -v -s -u -r -p -v)

                    check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)
                    if [ $check_sec_len -eq 2 ]
                    then
                      valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                    else
                      aceptor_site_sequence=NA
                      valid_aceptor_site=Coting_Boundary
                    fi
                  else
                    aceptor_site_sequence=NA
                    valid_aceptor_site=Coting_Boundary
                  fi
                  # Gen ID, Position, Valid Aceptor site, Aceptor Site location, Aceptor Site Sequence, Read ID, read pair
                  echo -e $aceptor"\t"$valid_aceptor_site"\t"$aceptor_site_location"\t"$aceptor_site_sequence"\t"$sl_read"\t"$read_pair >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab"
                fi
              else
                read_len=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_reverse_1.sam" | awk '{print length($10)}')
                if [ "$acepting_end" == "left" ]
                then
                  aceptor_site_chromosome=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_reverse_1.sam" | awk -F "\t" '{print $3}')
                  aceptor_site_location=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_reverse_1.sam"| awk -F "\t" -v len=$read_len '{print $4+len}')

                  if [ $aceptor_site_location -gt 1 ]
                  then
                    aceptor_site_extract=$(echo $aceptor_site_location | awk '{print $1":"$1+1}')
                    aceptor_site_sequence=$(seqkit subseq -j $THREADS -r $aceptor_site_extract --chr $aceptor_site_chromosome --gtf $GTF_REF $GENOME_REF | seqkit seq -t DNA -v -s -u -r -p -v)

                    check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)
                    if [ $check_sec_len -eq 2 ]
                    then
                      valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                    else
                      aceptor_site_sequence=NA
                      valid_aceptor_site=Coting_Boundary
                    fi
                  else
                    aceptor_site_sequence=NA
                    valid_aceptor_site=Coting_Boundary
                  fi

                  # Gen ID, Position, Valid Aceptor site, Aceptor Site location, Aceptor Site Sequence, Read ID, read pair
                  echo -e $aceptor"\t"$valid_aceptor_site"\t"$aceptor_site_location"\t"$aceptor_site_sequence"\t"$sl_read"\t"$read_pair >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab"
                else
                  aceptor_site_chromosome=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_reverse_1.sam" | awk -F "\t" '{print $3}')
                  aceptor_site_location=$(grep -w ^$sl_read $OUT_DIR/temp_files/Htseq_SAM/$read"_"$sl"_reverse_1.sam" | awk -F "\t" '{print $4}')

                  if [ $aceptor_site_location -gt 2 ]
                  then
                    aceptor_site_extract=$(echo $aceptor_site_location | awk '{print $1-2":"$1-1}')
                    aceptor_site_sequence=$(seqkit subseq -j $THREADS -r $aceptor_site_extract --chr $aceptor_site_chromosome --gtf $GTF_REF $GENOME_REF | seqkit seq -t DNA -v -s -u)

                    check_sec_len=$(echo $aceptor_site_sequence | grep -o . | grep -c .)
                    if [ $check_sec_len -eq 2 ]
                    then
                      valid_aceptor_site=$(echo $aceptor_site_sequence | awk '{if ($1=="AG") print "Y"; else print "N" }')
                    else
                      aceptor_site_sequence=NA
                      valid_aceptor_site=Coting_Boundary
                    fi
                  else
                    aceptor_site_sequence=NA
                    valid_aceptor_site=Coting_Boundary
                  fi
                  aceptor_site_location=$(($aceptor_site_location - 1))
                  # Gen ID, Position, Valid Aceptor site, Aceptor Site location, Aceptor Site Sequence, Read ID, read pair
                  echo -e $aceptor"\t"$valid_aceptor_site"\t"$aceptor_site_location"\t"$aceptor_site_sequence"\t"$sl_read"\t"$read_pair >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab"
                fi
              fi
            done
          done
        fi

        echo -e "Gene_ID\tN_raw_aceptor_sites\tN_Cannonical_Aceptor_Sites\tValid_Sites_Coordinates\tRead_Coverage" >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.summary"
        for aceptor in $aceptor_gene
        do
          search_aceptor=$aceptor
          read_num=$(grep -F -w -c $search_aceptor $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab")
          raw_aceptor_sites_num=$(grep -F -w $search_aceptor $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab" | awk '{print $3}' | sort -u | grep -c .)
          valid_aceptor_sites_num=$(grep -F -w $search_aceptor $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab" | awk '{ if ($2=="Y") print $3}' | sort -u | grep -c .)
          valid_aceptor_sites=$(grep -F -w $search_aceptor $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.tab" | awk '{ if ($2=="Y") print $3; else print "X"}' | sort -u | tr "\n" ";" | sed "s/;$//")
          echo -e $search_aceptor"\t"$raw_aceptor_sites_num"\t"$valid_aceptor_sites_num"\t"$valid_aceptor_sites"\t"$read_num >> $OUT_DIR/Results/Potential_aceptor_sites/$read"_"$sl"_aceptor_sites.summary"
        done

        echo $sl >> $OUT_DIR/temp_files/Raw_counts/$read"_header.temp"

        grep -v "^__" $OUT_DIR/Results/Raw_counts/$read"_"$sl"_raw_htseq.counts" >> $OUT_DIR/temp_files/Raw_counts/$read"_"$sl"_raw_htseq.temp"

        header=$(echo $header"\t"$read)
      fi
    done

    echo -e $header >> $OUT_DIR/Results/$sl"_hits.tab"
    check_data_number=$(echo $data_reads | tr " " "\n" | grep -c .)
    if [ $check_data_number -gt 1 ]
    then
      paste_files=$OUT_DIR/temp_files/Raw_counts/*"_"$sl"_raw_htseq.temp"
      paste_out=$OUT_DIR/Results/$sl"_hits.tab"
      temp_name=$sl
      paste_summary
    else
      awk -F "\t" '{if ($2>0) print}' $OUT_DIR/temp_files/Raw_counts/$read"_"$sl"_raw_htseq.temp" >> $OUT_DIR/Results/$sl"_hits.tab"
    fi

    for feat in $feature_name
    do
      sed -i "s/$feat://" $OUT_DIR/Results/$sl"_hits.tab"
    done

    check_no_valid_hit=$(grep -c . $OUT_DIR/Results/$sl"_hits.tab")
    if [ $check_no_valid_hit -eq 1 ]
    then
      echo "NO HITS ON KNOWN GENES!!" >> $OUT_DIR/Results/$sl"_hits.tab"
    fi
  done

  # Results per dataset
  check_sl_tags=$(echo $sl_tags_2 | tr " " "\n" | grep -c .)
  if [ $check_sl_tags -gt 1 ]
  then
    for read in $data_reads
    do
      cat $OUT_DIR/temp_files/Raw_counts/$read"_header.temp" | tr "\n" "\t" | awk '{print "Gene_ID\t"$0}' >> $OUT_DIR/Results/SL_Hits/$read"_SL_hits.tab"
      paste_out=$OUT_DIR/Results/SL_Hits/$read"_SL_hits.tab"
      paste_files=$OUT_DIR/temp_files/Raw_counts/$read"_"*"_raw_htseq.temp"
      temp_name=$read
      paste_summary
    done
  else
    for read in $data_reads
    do
      awk -F "\t" '{if ($2>0) print}' $OUT_DIR/temp_files/Raw_counts/$read"_"$sl"_raw_htseq.temp" >> $OUT_DIR/Results/SL_Hits/$read"_SL_hits.tab"
    done
  fi

  for read in $data_reads
  do
    for feat in $feature_name
    do
      sed -i "s/$feat://" $OUT_DIR/Results/SL_Hits/$read"_SL_hits.tab"
    done
  done
fi

exit
