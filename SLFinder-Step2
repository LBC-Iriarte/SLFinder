#!/usr/bin/env bash
##### Default Parameters
CDHIT_R=1
OUT_DIR=SL-analysis
THREADS=1
GAP_TRIMAL=0.9
SM_TRIMAL=0.5
MIN_RAW=15
MIN_TRIMAL=15

##### Usage
usage()
{
	echo "usage: SL:detector-step-2 [PARAMETERS] | [-h]
This script takes the results sequences from SLFinder-Step1, aligns and trimms them according to alignment quality (Hook Variants).
Alignments requiring manual curation are reported in the file 'Step2_Problematic-Alignments'.

Important note:
- Default parameters are set with trimal v1.4 in mind. The older v1.2 is far more agressive for the same parameters values.
	If you are using the older version set '-ts 0.001' so SLFinder beheaves as intended.

Packages required to have on the path:
	1) CD-HIT
	2) MAFFT
	3) Seqkit
	4) WEBLOGOS
	5) Trimal

Filtering Options:
	-c, --cdhitR	CD-HIT-EST sequence identity threshold used for the raw Hook matches (Default: 1)
	-m, --minimun	Minimal Raw Match length to consider (Default: 15, same as '-ba' option on Storage-step1)
	-ts, --trimalsm	Similarity score used in Trimal to authomaticaly trim the alignments (Default: 0.5)
	-tg, --trimalgap	Gap threshold used in Trimal to authomaticaly trim the alignments (Default: 0.90)
	-tm, --trimmin	Minimal trimmed sequence length (Default: 15)

Other Options:
	-o, --outdir	Directory with SLFinder-Step1 results (Default: SL-analysis)
	-t, --threads	Number of processors to use when possible (cd-hit-est, MAFFT) (Default=1)
	-w, --weblogos	Weglogos output extension (Default: _weblogos)
	-h, --help		This help message.
"
exit
}

##### Reading Parameters
while [ "$1" != "" ]; do
	case $1 in
		-c | --cdhitR )		shift
							CDHIT_R=$1
							;;
		-m | --minimun )	shift
							MIN_RAW=$1
							;;
		-o | --outdir )		shift
							OUT_DIR=$1
							;;
		-ts | --trimalsm )	shift
							SM_TRIMAL=$1
							;;
		-tg | --trimalgap )	shift
							GAP_TRIMAL=$1
							;;
		-tm | --trimmin )	shift
							MIN_TRIMAL=$1
							;;
		-t | --threads )	shift
							THREADS=$1
							;;
		-h | --help )		usage
							exit
							;;
		* )					usage
							exit 1
		esac
		shift
done

# Checking if all programs are installed
hash mafft 2>/dev/null || { echo >&2 "Mafft seems to not been installed or added to the Path. Aborting."; exit 1; }
hash seqkit 2>/dev/null || { echo >&2 "Seqkit seems to not been installed or added to the Path. Aborting."; exit 1; }
hash cd-hit-est 2>/dev/null || { echo >&2 "Cd-hit-est seems to not been installed or added to the Path. Aborting."; exit 1; }
hash weblogo 2>/dev/null || { echo >&2 "Weblogoseems seems to not been installed or added to the Path. Aborting."; exit 1; }
hash trimal 2>/dev/null || { echo >&2 "Trimal seems to not been installed or added to the Path. Aborting."; exit 1; }

# OUT_DIR exists and there is no other
if [ -z $OUT_DIR ]
then
	echo "No OUT_DIR detected. Something must be wrong with the given command (eg. whitespaces)"
	exit 1
else
	if [ ! -d $OUT_DIR ]
	then
		echo "There is no directory named: "$OUT_DIR
		exit 1
	fi
fi

# GAP_TRIMAL is a float number lesser or equal to 1
if [[ $GAP_TRIMAL =~ ([0-9]+\.?[0-9]*)|([0-9]*\.[0-9]+) ]]
then
	second_test=$(echo $CDHIT_R | awk '{if ($s <= 1 ) print "TRUE"}')
	if [ -z $second_test ]
	then
		echo "Invalid -g value: "$GAP_TRIMAL
		exit 1
	fi
else
	echo "-g value must be a float number" $GAP_TRIMAL
	exit 1
fi
second_test= # This empties the variable for the next test

# SM_TRIMAL is a float number lesser or equal to 1
if [[ $SM_TRIMAL =~ ([0-9]+\.?[0-9]*)|([0-9]*\.[0-9]+) ]]
then
	second_test=$(echo $CDHIT_R | awk '{if ($s <= 1 ) print "TRUE"}')
	if [ -z $second_test ]
	then
		echo "Invalid -s value: "$SM_TRIMAL
		exit 1
	fi
else
	echo "-s value must be a float number" $SM_TRIMAL
	exit 1
fi
second_test= # This empties the variable for the next test

# THREADS is a valid number
if [[ ! "$THREADS" =~ ^[0-9]+$ ]]
then
	echo "-t value must be an integir: " $THREADS
	exit 1
else
	if [ $THREADS -eq 0 ]
	then
		echo "Invalid -t value: "$THREADS
		exit 1
	fi
fi

# MIN_RAW is a valid number
if [[ ! "$MIN_RAW" =~ ^[0-9]+$ ]]
then
	echo "-m value must be an integir: " $MIN_RAW
	exit 1
else
	if [ $MIN_RAW -eq 0 ]
	then
		echo "Invalid -m value: "$MIN_RAW
		exit 1
	fi
fi

# MIN_TRIMAL is a valid number
if [[ ! "$MIN_TRIMAL" =~ ^[0-9]+$ ]]
then
	echo "-tm value must be an integir: " $MIN_TRIMAL
	exit 1
else
	if [ $MIN_TRIMAL -eq 0 ]
	then
		echo "Invalid -tm value: "$MIN_TRIMAL
		exit 1
	fi
fi

# CDHIT_R is a float number lesser than 1
if [[ $CDHIT_R =~ ([0-9]+\.?[0-9]*)|([0-9]*\.[0-9]+) ]]
then
	second_test=$(echo $CDHIT_R | awk '{if ($s <= 1 ) print "TRUE"}')
	if [ -z $second_test ]
	then
		echo "Invalid -c value: "$CDHIT_R
		exit 1
	fi
else
	echo "-c value must be a float number" $CDHIT_R
	exit 1
fi
second_test= # This empties the variable for the next test

# Check if there is data
rawdata_count=$(ls $OUT_DIR/Results/Raw_Matches | grep -c "-sequence" )
if [ $THREADS -eq 0 ]
then
	echo "No sequence data found at: "$OUT_DIR"/Results/Raw_Matches
	Fasta files on this folder must end with '-sequence'"
	exit 1
fi

##### Program execution
### Removing previous run
echo "Removing previous run"
rm -r $OUT_DIR/temp_files/filtered_matches
rm -r $OUT_DIR/temp_files/trimal_raw
rm -r $OUT_DIR/Results/weblogos
rm -r $OUT_DIR/Results/alignments
rm -r $OUT_DIR/Results/Hook_variants
rm $OUT_DIR/Warnings/Step2_Manual-curation
rm $OUT_DIR/Results/Step2_Trimal-Stats
rm $OUT_DIR/temp_files/Step2_Trimal-Stats-temp

### Creation of necesary directories
echo "Creating new output directories"
# Temporal files
mkdir $OUT_DIR/temp_files/filtered_matches
mkdir $OUT_DIR/temp_files/trimal_raw
# Results
mkdir $OUT_DIR/Results/alignments
mkdir $OUT_DIR/Results/Hook_variants
mkdir $OUT_DIR/Results/Hook_variants/Hook_Individual
mkdir $OUT_DIR/Results/weblogos
mkdir $OUT_DIR/Results/weblogos/alignments
mkdir $OUT_DIR/Results/weblogos/trimed_aligment

### Working variables (created using the user given options)
rawdata_list=$(ls $OUT_DIR/Results/Raw_Matches | grep "-sequence" | sed "s/-sequence//" )
discarded_files_list=
echo "The following Hook datasets require closer inspection. Try playing with trimal filtering options (-tg and -ts) and or user manual inspection:
" >> $OUT_DIR/Warnings/Step2_Manual-curation
### Running
for seqfile in $rawdata_list
do
	seq_count=$(grep -c ">" $OUT_DIR/Results/Raw_Matches/$seqfile"-sequence" )
	if [ $seq_count -eq 1 ]
	then
		echo $seqfile" Only has a single sequence" >> $OUT_DIR/Warnings/Step2_Manual-curation
		discarded_files_list=$discarded_files_list"_"$seqfile
	else
		seqkit seq -m $MIN_RAW $OUT_DIR/Results/Raw_Matches/$seqfile"-sequence" -o $OUT_DIR/temp_files/filtered_matches/$seqfile".seqkit-cut"
		cd-hit-est -c $CDHIT_R -T $THREADS -i $OUT_DIR/temp_files/filtered_matches/$seqfile".seqkit-cut" -o $OUT_DIR/temp_files/filtered_matches/$seqfile".cd-hit-est"
		#Aligment, sequence logo and trimming
		mafft --globalpair --thread $THREADS --quiet --maxiterate 1000 $OUT_DIR/temp_files/filtered_matches/$seqfile".cd-hit-est" > $OUT_DIR/Results/alignments/$seqfile".aln"
		weblogo -a ACTG -D fasta -c classic -F pdf -f $OUT_DIR/Results/alignments/$seqfile".aln" -o $OUT_DIR/Results/weblogos/alignments/$seqfile"-seqlogo.pdf"
		trimal -gt $GAP_TRIMAL -st $SM_TRIMAL -fasta -in $OUT_DIR/Results/alignments/$seqfile".aln" | awk '/^>/ {printf("\n%s\n",$0);next; } { printf("%s",$0);}	END {printf("\n");}' | awk 'NF' | grep -v ">" | awk -v data=$seqfile '{print ">"data"-" NR "\n" $s}' >> $OUT_DIR/temp_files/trimal_raw/$seqfile".trimal-raw"

		#To prevent crashes, if the trimal file is empty I delete it.
		empty_file=$(grep -c ">"  $OUT_DIR/temp_files/trimal_raw/$seqfile".trimal-raw")
		echo "Deleting empty files"
		if [ $empty_file -eq 0 ]
		then
			discarded_files_list=$discarded_files_list"_"$seqfile
			echo $seqfile" Trimal generated an empty file. The alignment likely requeres manual curation or to be discarded" >> $OUT_DIR/Warnings/Step2_Manual-curation ### Important file at the end
			rm $OUT_DIR/temp_files/trimal_raw/$seqfile".trimal-raw"
		fi
	fi
done

# Evaluating trimal results.
abemus_data= # If any data passes through the filters this variable becomes TRUE
seqkit stats -T $OUT_DIR/temp_files/trimal_raw/* | sed "s/$OUT_DIR\/temp_files\/trimal_raw\///" >> $OUT_DIR/temp_files/Step2_Trimal-Stats-temp
trimmed_list=$(ls $OUT_DIR/temp_files/trimal_raw/*".trimal-raw" | sed "s/.trimal-raw//" | sed "s/$OUT_DIR\/temp_files\/trimal_raw\///" )
for seqfile2 in $trimmed_list
do
	seq_len=$(grep $seqfile2".trimal-raw" $OUT_DIR/temp_files/Step2_Trimal-Stats-temp | cut -f 8)
	if [ $seq_len -ge $MIN_TRIMAL ]
	then
		# The central section of each trimmed sequence is present on the original sequences (no central positions were removed)
		bad_trim=0
		trim_seq=$(seqkit subseq -r "2:-2" $OUT_DIR/temp_files/trimal_raw/$seqfile2".trimal-raw" | seqkit seq -s | tr -d "-" )
		for trimed in trim_seq
		do
			matches=$(seqkit grep -s -r -p $trimed $OUT_DIR/Results/alignments/$seqfile2".aln" | grep -c ">")
			if [ $matches -ne 0 ]
			then
				bad_trim=$((bad_trim + 1))
			fi
		done
		if [ $bad_trim -ne 0 ]
		then
			echo $seqfile2": Some sequences do not match the original aligment ("$bad_trim")" >> $OUT_DIR/Warnings/Step2_Manual-curation
		else
			# If everything is right, generate a sequence logos for the trimal sequences and remove gaps
			weblogo -a ACTG -D fasta -c classic -F pdf -f $OUT_DIR/temp_files/trimal_raw/$seqfile2".trimal-raw" -o $OUT_DIR/Results/weblogos/trimed_aligment/$seqfile2"_Trimal-seqlogo.pdf"
			seqkit seq -g $OUT_DIR/temp_files/trimal_raw/$seqfile2".trimal-raw" -o $OUT_DIR/temp_files/trimal_raw/$seqfile2".trimal-nogap"
			abemus_data=TRUE
			cd-hit-est -c 1 -T $THREADS -i $OUT_DIR/temp_files/trimal_raw/$seqfile2".trimal-nogap" -o $OUT_DIR/Results/Hook_variants/Hook_Individual/$seqfile2"-SL.fa"
		fi
	else
		echo $seqfile2": curated alignment has less than "$MIN_TRIMAL"bp ("$seq_len")" >> $OUT_DIR/Warnings/Step2_Manual-curation
	fi
done

original_files_n=$(ls $OUT_DIR/Results/Raw_Matches/*sequence | wc -l)

echo "####################################
#####   Step2 Summary Report   #####
####################################

### Overview:
Analyzed files: "$original_files_n"
Minimal match length: "$MIN_RAW"
Identity match threshold (cd-hit-est): "$CDHIT_R"
Trimal Similarity Score: "$SM_TRIMAL"
Trimal Gap threshold: "$GAP_TRIMAL"
Min trimmed sequence: "$MIN_TRIMAL"
" > $OUT_DIR/Step2_Summary

# Check if any dataset passed the filters:
if [ ! -z $abemus_data ]
then
	# Trimmed seq stats
	seqkit stats -T $OUT_DIR/temp_files/trimal_raw/*".trimal-nogap" | sed "s/$OUT_DIR\/temp_files\/trimal_raw\///" >> $OUT_DIR/Results/Step2_Trimal-Stats
	# Concatenate all data and filter it with cd-hit-est
	cat $OUT_DIR/temp_files/trimal_raw/*".trimal-nogap" >> $OUT_DIR/temp_files/trimal_raw/"Trimal_all.fa"
	cd-hit-est -c 1 -T $THREADS -i $OUT_DIR/temp_files/trimal_raw/"Trimal_all.fa" -o $OUT_DIR/Results/Hook_variants/"Hook_all_variants.fa"
	sl_count=$(grep -c ">" $OUT_DIR/Results/Hook_variants/"Hook_all_variants.fa")
	filtered_files_n=$(ls $OUT_DIR/Results/Hook_variants/Hook_Individual/*SL.fa | wc -l)
	discarded=$(($original_files_n - $filtered_files_n))
	echo "N Discarded files: " $discarded"
Hook Variants: "$sl_count"

Discarded sequences: " >> $OUT_DIR/Step2_Summary
	echo $discarded_files_list | sed "s/_//" |tr "_" "\n" >> $OUT_DIR/Step2_Summary
	echo $sl_count" Hook variants were added to the SL_all_variants.fa file
Step 2 is done! Please evaluate the results before running Step 3. Depending on you data you might need to re-run this script -g and/or -s or manually curate the alignment.
Check the documentation for more information"
else
	# Report failure
	echo "All files were discarded. No Hook variants were generated" >> $OUT_DIR/Step2_Summary
	echo "
No data passed automatic trimming. Change -tg and/or -ts and re-run this step. Depending on you data you might need to re-run this script several times, trimming the 5' region or manually curate the alignment.
Check the documentation for more information"
fi
exit
