#!/usr/bin/env bash
# Default values
ASSEMBLIES=_Trinity.fasta
BLAST_I=90
BLAST_A=15
CDHIT_H=1
FILTERED_SET=_Trinity.filtered
HOOK_MIN=20
INCHWORM_KMER=15
IORIENT_CUTOFF=0.95
KMER_COUNT=0.0005
KMER_LENGHT=20
OUT_DIR=SL-analysis
T_MAX_MEM=1
THREADS=1
SEQTRIMM=50
MEDIAN_FILTER=T

##### Usage
usage() # Help message
{
	echo "usage: SL:detector-step-1.sh [OTHER PARAMETERS] [-a ASSEMBLIES] [-f FILTERED] | [-h]

This script takes filtered transcriptomes to generate potential Spliced Leaders sequences (or hooks) using assembled common kmers and then retrieves similar sequences present on the original assemblies.
The best hooks are then selected for future analyses based on the consistency on their orientation across multiple transcripts and their frequency.
The pipeline is designed to work with multiple assemblies, but it can be constrained to a single file with the options -a and -f
See the documentation for details.

Packages required to have on the path:
	1) BLAST+
 	2) CD-HIT
 	3) MAFFT
 	4) Seqkit
	5) Trinity (And the programs Jellyfish and Salmon that needs to work)

Input/Output Options:
 	-a, --asembly	String used to identify unfiltered transcriptome assemblies (Default: Trinity.fasta)
	-f, --filtered	String used to identify the filtered sequences (Default: Trinity.filtered)
	-o, --outdir	Directory where to store the output and temporary files (Default: SL-analysis)

Hook Assembly Options
	-c, --cdhitH	cd-hit-est sequence identity threshold used for Hook filtration (Default: 1)
	-kc, --kmercount	Minimal kmer observations required to be analyzed. It must be a float number representing the percentage of transcripts that should have the kmer (Default: 0.0005)
	-kl, --kmerlenght	Kmer lenght to be considered (Default: 20)
	-ki, --inchwormk	Kmer length used by Inchworm for Hook assembly. Must be between 10 and 32 and be smaller than -kl (Default: 5)
	-m, --hookmin	Minimal hook length to analyze (Default: 20)

Filtering Options
	-bi, --blastnI	BLASTn Identity threshold used to identify Hook matches in the unfiltered transcriptome (Default: 90)
	-ba, --blastnA	Minimum hook Match length (Default: 15)
	-i, --iorent	Percentage of cut off of for the Orientation Index (Default: 0.95)
	-me, --median	Filter hooks according to the median value of their matches count: T (True) or F (False) (Default: T)

Other options:
	-s, --seqtrimm	Trimm Raw matches larger than X, counting from the match (Default: 50) ### Necesito una mejor forma de describirlo
	-M, --Tmaxmemory	Suggested max memory for trinity in Gigabytes (Default: 1)
	-t, --threads	Number of processors to use when possible (Blast, cd-hit-est and Trinity)
	-h, --help	This help message.
"
exit
}

##### Reading Parameters
while [ "$1" != "" ]; do
	case $1 in
		-a | --assembly )		shift
								ASSEMBLIES=$1
								;;
		-bi | --blastnI )		shift
								BLAST_I=$1
								;;
		-ba | --blastnA )		shift
								BLAST_A=$1
								;;
		-c | --cdhitH )		 	shift
								CDHIT_H=$1
								;;
		-f | --filtered )		shift
								FILTERED_SET=$1
								;;
		-kc | --kmercount )		shift
								KMER_COUNT=$1
								;;
		-i | --iorient )		shift
								IORIENT_CUTOFF=$1
								;;
		-kl | --kmerlenght )	 	shift
								KMER_LENGHT=$1
								;;
		-m | --hookmin )		shift
								HOOK_MIN=$1
								;;
		-me | --median )		shift
								MEDIAN_FILTER=$1
								;;
		-M | --Tmaxmemory )	 	shift
								T_MAX_MEM=$1
								;;
		-s | --seqtrimm )		shift
								SEQTRIMM=$1
								;;
		-o | --outdir )		 	shift
								OUT_DIR=$1
								;;
		-t | --threads )		shift
								THREADS=$1
								;;
		-ki | --inchwormk )		shift
								INCHWORM_KMER=$1
								;;
		-h | --help )			usage
								exit
								;;
		* )						usage
								exit 1
	esac
	shift
done

##### Checking if all programs are installed
hash blastn 2>/dev/null || { echo >&2 "Blast seems to not been installed or added to the Path. Aborting."; exit 1; }
hash salmon 2>/dev/null || { echo >&2 "Salmon seems to not been installed or added to the Path. Aborting."; exit 1; }
hash Trinity 2>/dev/null || { echo >&2 "Trinity seems to not been installed or added to the Path. Aborting."; exit 1; }
hash jellyfish 2>/dev/null || { echo >&2 "jellyfish seems to not been installed or added to the Path. Aborting."; exit 1; }
hash mafft 2>/dev/null || { echo >&2 "Mafft seems to not been installed or added to the Path. Aborting."; exit 1; }
hash seqkit 2>/dev/null || { echo >&2 "Seqkit seems to not been installed or added to the Path. Aborting."; exit 1; }
hash cd-hit-est 2>/dev/null || { echo >&2 "Cd-hit-est seems to not been installed or added to the Path. Aborting."; exit 1; }

##### Parameter validation
# Raw assemblies exist
assembly_list=$(ls *$ASSEMBLIES | sed "s/$ASSEMBLIES//")

if [ -z "$assembly_list" ]
then
	echo "No assemblies detected with the following string: *"$ASSEMBLIES
	exit 1
else
	for assembly in $assembly_list
	do
		is_fasta=$(seqkit stats $assembly$ASSEMBLIES) # seqkit error message already clarifies if its a format or a file existing issue
		if [ -z "$is_fasta" ]
		then
			echo $assembly" is not a fasta file"
			exit 1
		else
			not_zipped=$(ls $assembly$ASSEMBLIES | grep -c ".gz"$)
			if [ ! $not_zipped -eq 0 ]
			then
				echo "Please unzip all files"
				exit 1
			fi
		fi
	done
fi

# BLAST_A is a number greater of 0
if [[ ! "$BLAST_A" =~ ^[0-9]+$ ]]
then
	echo "-ba value must be an integir: " $BLAST_A
	exit 1
else
	if [ $BLAST_A -eq 0 ]
	then
		echo "Invalid -ba value: "$BLAST_A
	 	exit 1
	fi
fi

# BLAST_I is a number greater of 0 and less of 100
if [[ ! "$BLAST_I" =~ ^[0-9]+$ ]]
then
	echo "-bi value must be an integir: " $BLAST_I
	exit 1
else
	if [ $BLAST_I -eq 0 ] && [ $BLAST_I -le 100 ]
	then
		echo "Invalid -bi value: "$BLAST_I
	 	exit 1
	fi
fi

# Filtered asemblies exist
filtered_list=$(ls *$FILTERED_SET | sed "s/$FILTERED_SET//")
if [ -z "$filtered_list" ]
then
	echo "No filtered assemblies detected with the following command: ls *"$FILTERED_SET
	exit 1
fi

# Raw and filtered assemblies list match
if [ ! "$filtered_list" == "$assembly_list" ]
then
	echo "Raw and filtered assemblies names do not match.
Raw assemblies identifiers: "$assembly_list"

Filtered assemblies identifiers: "$filtered_list
	exit 1
fi

# CDHIT_H is a float number lesser than 1
if [[ $CDHIT_H =~ ([0-9]+\.?[0-9]*)|([0-9]*\.[0-9]+) ]]
then
	second_test=$(echo $CDHIT_H | awk '{if ($s <= 1 ) print "TRUE"}')
	if [ -z $second_test ]
	then
		echo "Invalid -c value: "$CDHIT_H
		exit 1
	fi
else
	echo "-c value must be a float number "$CDHIT_H
	exit 1
fi
second_test= # This empties the variable for the next test

# $KMER_COUNT is a float number lesser than 1.
if [[ $KMER_COUNT =~ ([0-9]+\.?[0-9]*)|([0-9]*\.[0-9]+) ]]
then
	second_test=$(echo $KMER_COUNT | awk '{if ($s <= 1 ) print "TRUE"}')
	if [ -z $second_test ]
	then
		echo "Invalid -kc value: "$KMER_COUNT
		exit 1
	fi
else
	echo "-kc value must be a float number "$KMER_COUNT
	exit 1
fi
second_test= # This empties the variable for the next test

# IORIENT_CUTOFF is a float number lesser than 1.
if [[ $IORIENT_CUTOFF =~ ([0-9]+\.?[0-9]*)|([0-9]*\.[0-9]+) ]] # No entiendo como funiona pero detecta flotantes
then
	second_test=$(echo $IORIENT_CUTOFF | awk '{if ($s <= 1 ) print "TRUE"}')
	if [ -z $second_test ]
	then
		echo "Invalid -ki value: "$IORIENT_CUTOFF
		exit 1
	fi
else
	echo "-ki value must be a float number" $IORIENT_CUTOFF
	exit 1
fi
second_test= # This empties the variable for the next test

# $KMER_COUNT is a number greater of 0
if [[ ! "$KMER_LENGHT" =~ ^[0-9]+$ ]]
then
	echo "-kc value must be an integir: "$KMER_LENGHT
	exit 1
else
	if [ $KMER_LENGHT -eq 0 ]
	then
	 	echo "Invalid -kc value: "$KMER_LENGHT
		exit 1
	fi
fi

# HOOK_MIN is a valid number
if [[ ! "$HOOK_MIN" =~ ^[0-9]+$ ]]
then
	echo "-m value must be an integir: "$HOOK_MIN
	exit 1
else
	if [ $HOOK_MIN -eq 0 ]
	then
	 	echo "Invalid -m value: "$HOOK_MIN
	 	exit 1
	fi
fi

# OUT_DIR name is provided and it doesn't exist
if [ -z $OUT_DIR ]
then
	echo "No OUT_DIR detected. Something must be wrong with the given command (eg. whitespaces)"
	exit 1
else
	if [ -d $OUT_DIR ]
 	then
 		echo "There already is an output directory named: "$OUT_DIR
	 	exit 1
	fi
fi

# THREADS is a valid number
if [[ ! "$THREADS" =~ ^[0-9]+$ ]]
then
	echo "-t value must be an integir: "$THREADS
	exit 1
else
	if [ $THREADS -eq 0 ]
	then
	 	echo "Invalid -t value: "$THREADS
		exit 1
	fi
fi

# T_MAX_MEM is a valid number
if [[ ! "$T_MAX_MEM" =~ ^[0-9]+$ ]]
then
	echo "-M value must be an integir: "$T_MAX_MEM
	exit 1
else
	if [ $T_MAX_MEM -eq 0 ]
	then
		echo "Invalid -M value: "$T_MAX_MEM
	 	exit 1
	fi
fi

# INCHWORM_KMER is a valid number (integir between 10 and 32)
if [[ ! "$INCHWORM_KMER" =~ ^[0-9]+$ ]]
then
	echo "-ki value must be an integir: "$INCHWORM_KMER
	exit 1
else
	if [ ! $INCHWORM_KMER -ge 10 ] && [ $INCHWORM_KMER -le 32 ] && [ $KMER_LENGHT -gt $INCHWORM_KMER ]
	then
	 	echo "Invalid -ki value: "$INCHWORM_KMER
	 	exit 1
	fi
fi

# SEQTRIMM is a valid number
if [[ ! "$SEQTRIMM" =~ ^[0-9]+$ ]]
then
	echo "-s value must be an integir: " $SEQTRIMM
	exit 1
else
	if [ $SEQTRIMM -lt 20 ]
	then
		echo "Invalid -s value: "$SEQTRIMM
	 	echo "It must be greater than 20"
		exit 1
	fi
fi

# Median filter is T or F
if [[ ! "$MEDIAN_FILTER" = "T" ]] && [[ ! "$MEDIAN_FILTER" = "F" ]]
then
	echo "invalid -me value: " $MEDIAN_FILTER"
	It must be T or F"
	exit 1
fi

##### Program execution
###Creation of necesary directories
echo "Creating output directories"
mkdir $OUT_DIR

# Temporal files
mkdir $OUT_DIR/temp_files
mkdir $OUT_DIR/temp_files/kmer_counts
mkdir $OUT_DIR/temp_files/Hook_assembly
mkdir $OUT_DIR/temp_files/Blast_transcript_ref
mkdir $OUT_DIR/temp_files/Blast_hook
mkdir $OUT_DIR/temp_files/Blast_search
mkdir $OUT_DIR/temp_files/Sequence

#Results
mkdir $OUT_DIR/Results
mkdir $OUT_DIR/Results/Hooks
mkdir $OUT_DIR/Results/Raw_Matches
mkdir $OUT_DIR/Results/Anomalous_Matches

#Warnings
mkdir $OUT_DIR/Warnings

# This for construct BLAST refferences databases that are going to be used latter to retrieve transcripts matching the produced Hooks
echo "Constructing transcriptome references"
for assembly in $assembly_list
do
	echo "Processing :" $assembly
	makeblastdb -in $assembly$ASSEMBLIES -dbtype nucl -parse_seqids -input_type fasta -out $OUT_DIR/temp_files/Blast_transcript_ref/$assembly'_ref'
done

# This for counts the Kmers present on each filtered transcriptome and makes a table. To preserve the information about kmer frequency each is repeated as many times as its observed counts
echo "Counting Kmers"
for assembly in $assembly_list
do
	transcript_count=$(grep -c ">" $assembly$FILTERED_SET | awk '{print int($1/2)}')
	kmer_limit=$(echo $transcript_count | awk -v kc=$KMER_COUNT '{print int($1*kc)}')
	echo -e $assembly"\tTotal de transcriptos: "$transcript_count"\tKmers cutoff: "$kmer_limit
	echo -e $assembly"\t"$transcript_count"\t"$kmer_limit >> $OUT_DIR/temp_files/Hook_assembly/assembly_summary_temp
	jellyfish count -s 100M -m $KMER_LENGHT -t $THREADS -C -o $OUT_DIR/temp_files/kmer_counts/$assembly"_kmer_count" $assembly$FILTERED_SET
	jellyfish dump -c -L $kmer_limit -o $OUT_DIR/temp_files/kmer_counts/$assembly"_kmer_table" $OUT_DIR/temp_files/kmer_counts/$assembly"_kmer_count"
	awk '{for(i=0;i<$2;i++) print}' $OUT_DIR/temp_files/kmer_counts/$assembly"_kmer_table" >> $OUT_DIR/temp_files/kmer_counts/$assembly"_kmer_table2"
done
echo "Combining data from all assemblies and reformatting files"

# Merging all assemblies data and reformating. Each kmer is named after the line number on the concatenated file.
cat $OUT_DIR/temp_files/kmer_counts/*_kmer_table2 | awk '{print "kmer_" NR " " $s}' | awk -F " " '{print ">" $1 "\n" $2}' >> $OUT_DIR/temp_files/kmer_counts/Data-set_Kmer_fasta

# Assembling and filtering kooks.
echo "Assembpling Hooks..."
Trinity --seqType fa --max_memory $T_MAX_MEM"G" --single $OUT_DIR/temp_files/kmer_counts/Data-set_Kmer_fasta --CPU $THREADS --output $OUT_DIR/temp_files/Hook_assembly/Data-set_Trinity --no_normalize_reads --KMER_SIZE $INCHWORM_KMER --no_run_chrysalis
sed 's/;/-/' $OUT_DIR/temp_files/Hook_assembly/Data-set_Trinity/"inchworm.K"$INCHWORM_KMER".L"$INCHWORM_KMER".DS.fa" >> $OUT_DIR/temp_files/Hook_assembly/Hook_temp #For simplicity we keep inchworm nomenclature for the Hooks (aN;XXXX). However the semicolon is changed to prevent complications later on.
seqkit seq -m $HOOK_MIN -o $OUT_DIR/temp_files/Hook_assembly/Hook_temp2 $OUT_DIR/temp_files/Hook_assembly/Hook_temp
cd-hit-est -c $CDHIT_H -T $THREADS -i $OUT_DIR/temp_files/Hook_assembly/Hook_temp2 -o $OUT_DIR/Results/Hooks/Hook.fasta

echo "Searching for hook matches in the original transcriptome"
for assembly in $assembly_list
do
	echo "Processing" $assembly
	blastn -task blastn-short -query $OUT_DIR/Results/Hooks/Hook.fasta -db $OUT_DIR/temp_files/Blast_transcript_ref/$assembly'_ref' -out $OUT_DIR/temp_files/Blast_search/$assembly"_Hook_Blast" -evalue 1e-2 -outfmt "6 qseqid sseqid length slen nident mismatch sstart send" -max_target_seqs 200000 -num_threads $THREADS -perc_identity $BLAST_I -ungapped
done

echo "Counting Hook Matches per location"
# Columns Registry-Orientacion.tab: Hook; Start-Foward; Start-Reverse; End-Foward; End-Reverse
for assembly in $assembly_list
do
	echo $assembly
	test_hook=$(cut -f 1 $OUT_DIR/temp_files/Blast_search/$assembly"_Hook_Blast" | sort -u)
	hook_total=$(echo $test_hook | tr " " "\n" | wc -l)
	count_hook=1
	for hook in $test_hook
	do
		echo "Procesing hook nº "$count_hook" of "$hook_total
		grep $hook $OUT_DIR/temp_files/Blast_search/$assembly"_Hook_Blast" >> $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"-Blast"

		# One hit transcripts
		cut -f 2 $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"-Blast" | uniq -u >> $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"-ID"
		grep -w $hook $OUT_DIR/temp_files/Blast_search/$assembly"_Hook_Blast" >> $OUT_DIR/temp_files/Blast_search/$assembly"_Filtered_Hook_Blast" ## added line
		grep -w -f $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"-ID" $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"-Blast" | awk -v aln=$BLAST_A '{if ($3>=aln) print }' | awk '{if ($7<$8 && $8<=100) print $1 "\t" 1 "\t" 0 "\t" 0 "\t" 0; else if ($7>$8 && $7<=100) print $1 "\t" 0 "\t" 1 "\t" 0 "\t" 0; else if ($7<$8 && $7>50 && $4-$7<=100) print $1 "\t" 0 "\t" 0 "\t" 1 "\t" 0; else if ($7>$8 && $8>50 && $4-$8<=100) print $1 "\t" 0 "\t" 0 "\t" 0 "\t" 1}' >> $OUT_DIR/temp_files/Blast_search/Orientation_Registry.tab
		count_hook=$(( $count_hook + 1 ))

		# Multiple hit transcripts
		cut -f 2 $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"-Blast" | uniq -d >> $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"_multihit.ID"
	done
done

orientation_check=$(cut -f1 $OUT_DIR/temp_files/Blast_search/Orientation_Registry.tab | sort -u)
for ori in $orientation_check
do
	start_forward=$(grep $ori $OUT_DIR/temp_files/Blast_search/Orientation_Registry.tab | cut -f 2 | grep -c "1")
	start_reverse=$(grep $ori $OUT_DIR/temp_files/Blast_search/Orientation_Registry.tab | cut -f 3 | grep -c "1")
	end_forward=$(grep $ori $OUT_DIR/temp_files/Blast_search/Orientation_Registry.tab | cut -f 4 | grep -c "1")
	end_reverse=$(grep $ori $OUT_DIR/temp_files/Blast_search/Orientation_Registry.tab | cut -f 5 | grep -c "1")
	echo -e $ori"\t"$start_forward"\t"$start_reverse"\t"$end_forward"\t"$end_reverse >> $OUT_DIR/temp_files/Summary-Orientacion.temp
done

# Writing summary files
echo -e "Hook\tStart-Forward\tStart-Reverse\tEnd-Forward\tEnd-Reverse\tC.I.\tTotal Observations" >> $OUT_DIR/Results/Step1-All_Hooks
awk '{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"sqrt((($2+$5)-($3+$4))^2)/($2+$3+$4+$5)"\t"$2+$3+$4+$5}' $OUT_DIR/temp_files/Summary-Orientacion.temp | tee -a $OUT_DIR/Results/Step1-All_Hooks $OUT_DIR/temp_files/Summary-Orientacion_2.temp >/dev/null

if [[ "$MEDIAN_FILTER" = "T" ]]
then
	median=$(sort -k 7 -n $OUT_DIR/temp_files/Summary-Orientacion_2.temp | awk ' { a[i++]=$7; } END { print a[int(i/2)]; }')
else
	median=1
fi

echo -e "Hook\tStart-Forward\tStart-Reverse\tEnd-Forward\tEnd-Reverse\tC.I.\tTotal Observations" >> $OUT_DIR/Results/Step1-Best_Candidates
awk -v conI=$IORIENT_CUTOFF -v med=$median '{if ($6>=conI && $7>=med) print}' $OUT_DIR/temp_files/Summary-Orientacion_2.temp >> $OUT_DIR/Results/Step1-Best_Candidates
best_hook=$(cut -f1 $OUT_DIR/Results/Step1-Best_Candidates | grep -v "Hook")
echo "Retreiving raw transcriptomic sequences"

# Diagnostic Hook BLAST
for hook in $best_hook
do
	awk -v key="$hook" 'BEGIN {RS=">"} match($0, key) {print ">"$0 }' $OUT_DIR/Results/Hooks/Hook.fasta >> $OUT_DIR/Results/Best-Hook.fasta
done

anomalus_hook=
if [ -f $OUT_DIR/Results/Best-Hook.fasta ]
then
	makeblastdb -in $OUT_DIR/Results/Best-Hook.fasta -dbtype nucl -parse_seqids -input_type fasta -out $OUT_DIR/temp_files/Blast_hook/Best-Hook_ref
	blastn -task blastn-short -query $OUT_DIR/Results/Best-Hook.fasta -db $OUT_DIR/temp_files/Blast_hook/Best-Hook_ref -out $OUT_DIR/temp_files/Blast_hook/Best-Hook_selfblast -evalue 1e-2 -outfmt "6 qseqid sseqid length sstart send" -num_threads $THREADS -perc_identity 100 -ungapped
	anomalus_hook=$(cut -f 1 $OUT_DIR/temp_files/Blast_hook/Best-Hook_selfblast | uniq -d)
fi

if [ -z "$anomalus_hook" ]
then
	echo "
No anomalous hooks were found by the self Hooks BLAST" >> $OUT_DIR/Warnings/Step1_Hook-Anomalies
else
	echo -e "Query-Hook\tSubject-Hook\tAlignment Length\tStart\tEnd" >> $OUT_DIR/Warnings/Step1_Hook-Anomalies
fi

for anom_hook in $anomalus_hook
do
	grep "^"$anom_hook $OUT_DIR/temp_files/Blast_hook/Best-Hook_selfblast >> $OUT_DIR/Warnings/Step1_Hook-Anomalies
done

# Extracting sequences.
multi_hit=FALSE
for hook in $best_hook
do
	echo "
Extracting "$hook" Matches"
	for assembly in $assembly_list
	do
		echo "Assembly: "$assembly"
		"
		# Creating the tables to extract the sequences for each possition on each assembly
	 	grep -w $hook $OUT_DIR/temp_files/Blast_search/$assembly"_Filtered_Hook_Blast" | awk -v aln=$BLAST_A '{if ($3>=aln) print }' | awk '{if ($7<$8 && $8<=100) print $2 " 1-" $8 + 5 " plus"}' >> $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-5prima-forward_sequence_extract"
	 	grep -w $hook $OUT_DIR/temp_files/Blast_search/$assembly"_Filtered_Hook_Blast" | awk -v aln=$BLAST_A '{if ($3>=aln) print }' | awk '{if ($7>$8 && $7<=100) print $2 " 1-" $7 + 5 " plus"}' >> $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-5prima-reverse_sequence_extract"
		grep -w $hook $OUT_DIR/temp_files/Blast_search/$assembly"_Filtered_Hook_Blast" | awk -v aln=$BLAST_A '{if ($3>=aln) print }' | awk '{if ($7<$8 && $4-$7<=100) print $2 " " $7-5 "-" $4" plus"}' >> $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-3prima-forward_sequence_extract"
		grep -w $hook $OUT_DIR/temp_files/Blast_search/$assembly"_Filtered_Hook_Blast" | awk -v aln=$BLAST_A '{if ($3>=aln) print }' | awk '{if ($7>$8 && $4-$8<=100) print $2 " " $8-5 "-" $4" plus"}' >> $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-3prima-reverse_sequence_extract"

		# Extracting good matches
		check_5primaforward=$(wc -l $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-5prima-forward_sequence_extract" | cut -f 1 -d " " )
		if [ $check_5primaforward -gt 0 ]
		then
			echo "Procesing: "$hook"-5prima-forward"
			blastdbcmd -db $OUT_DIR/temp_files/Blast_transcript_ref/$assembly'_ref' -entry_batch $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-5prima-forward_sequence_extract" | sed "s/>/'>5prima-forward_'$hook'_origin:'$assembly'_'/" | tr -d "'" | seqkit subseq -r "-"$SEQTRIMM":-1" >> $OUT_DIR/Results/Raw_Matches/$hook"-5prima-forward-sequence"
		fi

		check_5primareverse=$(wc -l $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-5prima-reverse_sequence_extract" | cut -f 1 -d " " )
		if [ $check_5primareverse -gt 0 ]
		then
			echo "Procesing: "$hook"-5prima-reverse"
			blastdbcmd -db $OUT_DIR/temp_files/Blast_transcript_ref/$assembly'_ref' -entry_batch $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-5prima-reverse_sequence_extract" | sed "s/>/'>5prima-reverse_'$hook'_origin:'$assembly'_'/" | tr -d "'" | seqkit subseq -r "-"$SEQTRIMM":-1" >> $OUT_DIR/Results/Raw_Matches/$hook"-5prima-reverse-sequence"
		fi

		check_3primaforward=$(wc -l $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-3prima-forward_sequence_extract" | cut -f 1 -d " " )
		if [ $check_3primaforward -gt 0 ]
		then
			echo "Procesing: "$hook"-3prima-forward"
			blastdbcmd -db $OUT_DIR/temp_files/Blast_transcript_ref/$assembly'_ref' -entry_batch $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-3prima-forward_sequence_extract" | sed "s/>/'>3prima-forward_'$hook'_origin:'$assembly'_'/" | tr -d "'" | seqkit subseq -r "1:"$SEQTRIMM >> $OUT_DIR/Results/Raw_Matches/$hook"-3prima-forward-sequence"
		fi

		check_3primaforward=$(wc -l $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-3prima-reverse_sequence_extract" | cut -f 1 -d " " )
		if [ $check_3primaforward -gt 0 ]
		then
			echo "Procesing: "$hook"-3prima-reverse"
			blastdbcmd -db $OUT_DIR/temp_files/Blast_transcript_ref/$assembly'_ref' -entry_batch $OUT_DIR/temp_files/Blast_search/$assembly"_"$hook"-3prima-reverse_sequence_extract" | sed "s/>/'>3prima-reverse_'$hook'_origin:'$assembly'_'/" | tr -d "'" | seqkit subseq -r "1:"$SEQTRIMM >> $OUT_DIR/Results/Raw_Matches/$hook"-3prima-reverse-sequence"
		fi

		# Reporting Transcripts with multiple matches

		check_multi_hit=$(wc -l $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"_multihit.ID")
		if [ $check_3primaforward -gt 0 ]
		then
			cp $OUT_DIR/temp_files/Blast_search/$assembly"-"$hook"_multihit.ID" $OUT_DIR/Results/Anomalous_Matches/$assembly"-"$hook"_multihit.ID"
			seqkit grep -j $THREADS -r -f $OUT_DIR/Results/Anomalous_Matches/$assembly"-"$hook"_multihit.ID" $assembly$ASSEMBLIES >> $OUT_DIR/Results/Anomalous_Matches/$assembly"-"$hook"_multihit.fa"
			multi_hit=TRUE
			multi_assembly=$multi_assembly"_"$assembly
		fi
	done
done

# Summarizing Results

assemblies_n=$(echo $assembly_list  | tr " " "\n" | wc -l)
unfiltered_hook_n=$(grep -v -c Hook $OUT_DIR/Results/Step1-All_Hooks)
check_best_hooks=$(grep -v -c Hook $OUT_DIR/Results/Step1-Best_Candidates )

echo "####################################
#####   Step1 Summary Report   #####
####################################

### Overview:
Assemblies analized: "$assemblies_n"
Kmer size: "$KMER_LENGHT"
Inchworm Kmer size: "$INCHWORM_KMER"
Kmer count Filter: "$KMER_COUNT"%
" > $OUT_DIR/Step1_Summary

echo -e "Assembly\tN Transcripts\tKmer threshold" >> $OUT_DIR/Step1_Summary
cat $OUT_DIR/temp_files/Hook_assembly/assembly_summary_temp >> $OUT_DIR/Step1_Summary
echo "
###################################################################################

### pSL Hooks generated
Total Hooks: "$unfiltered_hook_n"
Min Hook len: "$HOOK_MIN"
Hook clustering threshold: "$CDHIT_H"
Hook match identity cutoff on transcriptome: "$BLAST_I"
Min Match length: "$BLAST_A"
" >> $OUT_DIR/Step1_Summary

cat $OUT_DIR/Results/Step1-All_Hooks >> $OUT_DIR/Step1_Summary
echo "
###################################################################################

### Filtered hooks
Best hooks found: "$check_best_hooks"
CI: "$IORIENT_CUTOFF"
Observation count threshold: "$median"
"  >> $OUT_DIR/Step1_Summary

if [ $check_best_hooks -gt 0 ]
then
	echo "
Step 1 is done!!! Proceed to step 2 to filter the results."
	cat $OUT_DIR/Results/Step1-Best_Candidates >> $OUT_DIR/Step1_Summary
	echo -e "
###################################################################################

### Matches found:
File\tN Sequences" >> $OUT_DIR/Step1_Summary
	grep -c ">" $OUT_DIR/Results/Raw_Matches/* | sed "s/$OUT_DIR\/Results\/Raw_Matches\///" | sed 's/-sequence:/\t/' >> $OUT_DIR/Step1_Summary

	if [ "$multi_hit" == "TRUE" ]
	then
	echo -e "
###################################################################################

### Number of Transcripts with Multiple hits:" >> $OUT_DIR/Step1_Summary
		assembly_multiple_hit=$(echo $multi_assembly | sed 's/^_//' | tr "_" "\n")

		echo "Assembly "$best_hook | tr "_" "\t" >> $OUT_DIR/Step1_Summary

		for multi in $assembly_multiple_hit
		do
			table_line=$multi
			for hook in $best_hook
			do
				if [ ! -z $OUT_DIR/Results/Anomalous_Matches/$multi"-"$hook"_multihit.ID" ]
				then
					multi_hit_transcripts_n=$(grep -c . $OUT_DIR/Results/Anomalous_Matches/$multi"-"$hook"_multihit.ID")
				else
					multi_hit_transcripts_n=0
				fi
				table_line=$table_line"_"$multi_hit_transcripts_n
			done
			echo $table_line | tr "_" "\t" >> $OUT_DIR/Step1_Summary
		done
	fi

else
	echo "
Step 1 is done!!!
No Hook sequence passed the filters."
fi
exit
